<?php

namespace frontend\controllers;

use common\components\HuawaApi;
use common\components\Message;
use common\models\AdminOrderState;
use common\models\Area;
use common\models\EvaluateGoods;
use common\models\EvaluateStore;
use common\models\OrderCommon;
use common\models\OrderGoods;
use common\models\OrderLog;
use common\models\Orders;
use common\models\RefundReason;
use common\models\RefundReturn;
use Yii;


/**
 * InvoiceController
 */
class InvoiceController extends BaseController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        //$this->validLogin();
    }

    /**
     * 发票类型
     * @var array
     */
    private $invoice_type = [
        1 => "增值税电子发票",
        2 => "增值税纸质普通发票",
        3 => "增值税专用发票",
    ];

    /**
     * 发票内容
     * @var array
     */
    private $invoice_content = [
        "服务费" => "服务费",
        "鲜花配送服务费" => "鲜花配送服务费",
        "花篮配送服务费" => "花篮配送服务费",
    ];

    /**
     * 发票抬头类型
     * @var array
     */
    private $invoice_title_type = [
        1 => '个人',
        2 => '公司',
    ];

    /**
     * 获取发票配置内容
     * @return mixed
     */
    public function actionConfig()
    {
        $data = array();
        $data['invoice_type'] = $this->invoice_type;
        $data['invoice_content'] = $this->invoice_content;
        $data['invoice_title_type'] = $this->invoice_title_type;
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }

    /**
     * 提交发票
     * @return mixed
     */
    public function actionPost()
    {

        $post = \Yii::$app->request->post();
        $order_id = isset($post['order_id']) ? (int)$post['order_id'] : 0;
        if ($order_id <= 0) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
        if (empty($order)) {
            return $this->responseJson(Message::ERROR, '订单不存在或已删除');
        }
        if (Orders::instance()->getOrderOperateState('invoice', $order) == false) {
            return $this->responseJson(Message::ERROR, '订单状态暂不能开票，如有疑问请联系客服');
        }
        $filter = array(
            'inv_type', 'inv_content', 'invoice_title_type', 'inv_title',
            'inv_rec_province', 'inv_rec_city', 'inv_rec_area', 'inv_person_num',
            'inv_goto_addr', 'inv_rec_name', 'inv_rec_mobphone', 'inv_remark',
            'inv_email', 'inv_gs_adress', 'inv_gs_tel', 'inv_gs_bank', 'inv_gs_bankon'
        );
        $require_int = array('inv_type', 'invoice_title_type', 'inv_rec_province', 'inv_rec_city', 'inv_rec_area');
        $data = array();
        foreach ($filter as $key) {
            $data[$key] = isset($post[$key]) ? trim($post[$key]) : '';
            if (in_array($key, $require_int)) $data[$key] = (int)$data[$key];
            //if ($data[$key] && !is_utf8($data[$key])) return $this->responseJson(Message::ERROR, '请勿填写特殊符号' . $key);
        }
        extract($data);
        if (!array_key_exists($inv_type, $this->invoice_type)) {
            return $this->responseJson(Message::ERROR, '请选择发票类型');
        }
        if (!array_key_exists($inv_content, $this->invoice_content)) {
            return $this->responseJson(Message::ERROR, '请选择发票内容');
        }
        if ($inv_type != 3 && !array_key_exists($invoice_title_type, $this->invoice_title_type)) {
            return $this->responseJson(Message::ERROR, '请选择发票抬头类型');
        }

        if ($inv_email && !isEmail($inv_email)) {
            return $this->responseJson(Message::ERROR, '请填写正确的邮箱');
        }
        if (!isMobile($inv_rec_mobphone)) {
            return $this->responseJson(Message::ERROR, '请填写正确的手机号');
        }

        if ($inv_remark && mb_strlen($inv_remark, 'UTF-8') > 100) {
            return $this->responseJson(Message::ERROR, '备注最多填写100字');
        }

        $area_list = Area::find()->select('area_name')->where(['area_id' => [$inv_rec_province, $inv_rec_city, $inv_rec_area]])->orderBy('area_deep asc')->asArray()->all();

        $inv_goto_addr = implode(' ', array_column($area_list, 'area_name')) . ' ' . $inv_goto_addr;
        if ($inv_type == 1) {
            $invoice_info = array(
                $inv_email, $inv_title, $inv_content, $inv_goto_addr, $inv_remark, $inv_person_num,TIMESTAMP
            );
        } elseif ($inv_type == 2) {
            $invoice_info = array(
                $inv_rec_name, $inv_rec_mobphone, $inv_title, $inv_content, $inv_goto_addr, $inv_remark, $inv_person_num,TIMESTAMP
            );
        } elseif ($inv_type == 3) {
            $invoice_info = array(
                $inv_rec_name, $inv_rec_mobphone, $inv_title, $inv_content, $inv_goto_addr, $inv_remark, $inv_person_num, $inv_gs_adress, $inv_gs_tel, $inv_gs_bank, $inv_gs_bankon,TIMESTAMP
            );
        }

        // || count(array_filter($invoice_info)) != count($invoice_info)
        if (empty($invoice_info)) {
            return $this->responseJson(Message::ERROR, '请完善表单');
        }

        $invoice_data = array();
        $invoice_data['invoice_type'] = (int)$inv_type;
        $invoice_data['invoice_use'] = 1;
        $invoice_data['invoice_info'] = implode(',', $invoice_info);
        $invoice_data['inv_amount'] = 0;
        $order_common = OrderCommon::findOne($order->order_id);
        $order_common->setAttributes($invoice_data);
        $update = $order_common->save();
        if (!$update) {
            return $this->responseJson(Message::ERROR, Message::ERROR_MSG);
        }
        $trace = Orders::instance()->getOrderStateTrace($order);
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG,$trace);
    }

    /**
     * 发票详情
     * @return mixed
     */
    public function actionView()
    {
        $post = \Yii::$app->request->post();
        $order_id = isset($post['order_id']) ? (int)$post['order_id'] : 0;
        if ($order_id <= 0) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }

        $map = array();
        $map['order_id'] = $order_id;
        $map['buyer_id'] = $this->member_id;
        $map['delete_state'] = 0;
        $order = Orders::findOne($map);
        if (empty($order)) {
            return $this->responseJson(Message::ERROR, '订单不存在或已删除');
        }

        $order_common = OrderCommon::findOne($order->order_id);

        $common_info = $order_common->getAttributes();

        if($common_info['invoice_use'] == 0){
            return $this->responseJson(Message::ERROR, '您还未开票');
        }

        $invoice_info = explode(',', $common_info['invoice_info']);
        $invoice_type = $common_info['invoice_type'];

        if ($invoice_type == 1) {
            $inv_email = $invoice_info[0];
            $inv_title = $invoice_info[1];
            $inv_content = $invoice_info[2];
            $inv_goto_addr = $invoice_info[3];
            $remark = $invoice_info[4];
            $inv_person_num = $invoice_info[5];
            $inv_time = $invoice_info[6];
        } elseif ($invoice_type == 2) {
            $inv_rec_name = $invoice_info[0];
            $inv_rec_mobphone = $invoice_info[1];
            $inv_title = $invoice_info[2];
            $inv_content = $invoice_info[3];
            $inv_goto_addr = $invoice_info[4];
            $remark = $invoice_info[5];
            $inv_person_num = $invoice_info[6];
            $inv_time = $invoice_info[7];
        } elseif ($invoice_type == 3) {
            $inv_rec_name = $invoice_info[0];
            $inv_rec_mobphone = $invoice_info[1];
            $inv_title = $invoice_info[2];
            $inv_content = $invoice_info[3];
            $inv_goto_addr = $invoice_info[4];
            $remark = $invoice_info[5];
            $inv_person_num = $invoice_info[6];
            $inv_gs_adress = $invoice_info[7];
            $inv_gs_tel = $invoice_info[8];
            $inv_gs_bank = $invoice_info[9];
            $inv_gs_bankon = $invoice_info[10];
            $inv_time = $invoice_info[11];
        }
        $inv_code = $common_info['inv_code'];
        $wuliu_code = trim($common_info['wuliu_code']);
        $wuliu_company = trim($common_info['wuliu_company']);
        $inv_amount = $common_info['inv_amount'];

        $reopen_invoice_info['inv_type'] = $invoice_type;
        $reopen_invoice_info['inv_type_text'] = $this->invoice_type[$invoice_type];
        $reopen_invoice_info['inv_code'] = $inv_code;
        $reopen_invoice_info['inv_email'] = (string)$inv_email;
        $reopen_invoice_info['inv_content'] = (string)$inv_content;
        $reopen_invoice_info['inv_title'] =(string)$inv_title;
        $reopen_invoice_info['inv_rec_name'] = (string)$inv_rec_name;
        $reopen_invoice_info['inv_rec_mobphone'] = (string)$inv_rec_mobphone;
        $reopen_invoice_info['inv_goto_addr'] = (string)$inv_goto_addr;
        $reopen_invoice_info['inv_code'] = $inv_code;
        $reopen_invoice_info['wuliu_code'] = $wuliu_code;
        $reopen_invoice_info['wuliu_company'] = $wuliu_company;
        $reopen_invoice_info['inv_amount'] = (string)$inv_amount;
        $reopen_invoice_info['inv_remark'] = (string)$remark;
        $reopen_invoice_info['inv_person_num'] = (string)$inv_person_num;
        $reopen_invoice_info['inv_gs_adress'] = (string)$inv_gs_adress;
        $reopen_invoice_info['inv_gs_tel'] = (string)$inv_gs_tel;
        $reopen_invoice_info['inv_gs_bank'] = (string)$inv_gs_bank;
        $reopen_invoice_info['inv_gs_bankon'] = (string)$inv_gs_bankon;
        $reopen_invoice_info['inv_time'] = $inv_time ? date('Y-m-d H:i:s',$inv_time) : '';
        $reopen_invoice_info['invoice_use'] = $common_info['invoice_use'];

        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG,['invoice_info'=>$reopen_invoice_info]);
    }

}
<?php

namespace frontend\controllers;

use common\components\HuawaApi;
use common\components\Log;
use common\components\Message;
use common\components\WeixinSubscribeMsg;
use common\helper\SensitiveWord;
use common\models\AdminOrderState;
use common\models\Adv;
use common\models\AlyContentSecurity;
use common\models\EvaluateGoods;
use common\models\EvaluateStore;
use common\models\Goods;
use common\models\HuadiScoreLog;
use common\models\GroupShoppingFalseMember;
use common\models\GroupShoppingMember;
use common\models\GroupShoppingTeam;
use common\models\Member;
use common\models\MemberExppointsLog;
use common\models\Notify;
use common\models\OrderCommon;
use common\models\OrderGoods;
use common\models\OrderLog;
use common\models\OrderModify;
use common\models\OrderNoPushRefund;
use common\models\Orders;
use common\models\PXianshiGoods;
use common\models\PXianshiMemberGoods;
use common\models\RefundReason;
use common\models\RefundReturn;
use common\models\StoreHuadiScoreQueue;
use common\models\Voucher;
use Yii;
use yii\db\Expression;
use yii\helpers\ArrayHelper;


/**
 * MemberOrderController
 */
class MemberOrderController extends BaseController
{
    public $refund_reason_list = [];
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->validLogin();
        $this->refund_reason_list = ArrayHelper::map(RefundReason::getRefundReasons(),'reason_id','reason_info');
    }

    /**
     * 订单类型
     * @var array
     */
    private $group_type = [
        'unpay' => '待付款',
        'confirm' => '待收货',
        'eva' => '待评价',
        'service' => '售后',
    ];

    private $_huaDiUser = '【花递用户】';

    //订单跟进表字段
    private $_addOrderFollowField = [
        'admin_id',
        'admin_name',
        'add_time',
        'f_content',
        'error_type',
        'error_des',
        'order_id',
        'follow_type',
        'follow_images',
        'is_deal',
        'export_admin_id',
        'export_time'
    ];

    //订单字段更新记录表字段
    private $_addOrderEditHistoryField = [
        'order_id',
        'admin_id',
        'admin_name',
        'change_field',
        'pre_value',
        'new_value',
        'is_contact_store',
        'add_time',
        'contact_time'
    ];

    /**
     * 订单列表
     * @return mixed
     */
    public function actionIndex()
    {
        $param = Yii::$app->request->post();
        $page = (int)$param['page'] ? (int)$param['page'] : 1;
        $type = array_key_exists($param['group'], $this->group_type) ? $param['group'] : '';
        $map = [];
        $map['orders.buyer_id'] = $this->member_id;
        $map['orders.delete_state'] = 0;
        $map['orders.siteid'] = SITEID;
        if ($type == 'unpay') {
            $map['orders.order_state'] = ORDER_STATE_NEW;
        } elseif ($type == 'confirm') {
            $map['orders.order_state'] = [ORDER_STATE_PAY, ORDER_STATE_CONFIRM];
            if(SITEID == 258){
                $map = ['and',$map,['is','no_push.id',null]];//不显示有退款记录的订单（2019年12月 1.0.10订单流程优化）
            }
        } elseif ($type == 'eva') {
            $map['orders.order_state'] = ORDER_STATE_SUCCESS;
            $map['orders.evaluation_state'] = 0;
        } elseif ($type == 'service') {
            $state['orders.order_state'] = [ORDER_STATE_REFUND, ORDER_STATE_COMPLAIN];
            if(SITEID == 258){
                $state = ["or",$state,['>','no_push.id',0]];//显示有退款记录的订单（2019年12月 1.0.10订单流程优化）
            }
            $map = ["and",$state,$map];
        }
        $order = new Orders();
        if (SITEID == 258) {
            $order_data = $order->getFriendlyOrderDataHuadi($map, $page, $type);
        } else {
            $order_data = $order->getFriendlyOrderData($map, $page);
        }
        $adv_model = new Adv();
        $order_data['adv_banner'] = $adv_model->getBanner(168);
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $order_data);
    }

    /**
     * 订单详情
     * @return mixed
     */
    public function actionView()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        $is_refund = (int)Yii::$app->request->post('is_refund', 0);
        if (!$order_id) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        $map = [];
        $map['orders.order_id'] = $order_id;
        //$map['orders.buyer_id'] = $this->member_id;
        $map['orders.delete_state'] = 0;

        $order = new Orders();
        if (SITEID == 258) {
            $data = $order->getOrderDetailHuadi($map, $is_refund);
//            var_dump($data);exit;
            if(isset($data['group_shopping_state']) && $data['group_shopping_state'] > 0){
                $team_info = (new GroupShoppingTeam())->getTeamInfo($data['group_shopping_team_id']);
                $group_member_model = new GroupShoppingMember();
                $members = $group_member_model->getMember($data['group_shopping_team_id']);
                $false_member = GroupShoppingFalseMember::getFalseMember($data['group_shopping_team_id'],$team_info['add_people'],$data['group_shopping_state']);
                //20200803拼团假人+真人数量超过限制处理
                if(count($members) < $team_info['max_people']){
                    $need_false_member = $team_info['max_people'] - count($members);
                    if($false_member){
                        for($i = 0; $i < $need_false_member; $i++){
                            if(isset($false_member[$i])){
                                $members[] = $false_member[$i];
                            }
                        }
                    }
                }
                $data['group_shopping_member'] = $members;
                $data['group_shopping_need_people'] = $team_info['max_people'] - count($members);
                $data['goods_list'][0]['group_price'] = $team_info['group_price'];
                switch ($data['group_shopping_state']){
                    case 1:
                        if($data['state_text'] != '待付款'){
                            $data['state_text'] = '拼团中';
                            $data['trace'][0]['content'] = '订单提交成功';
                        }
                        break;
                    case 2:
                        $data['state_text'] = '拼团成功';
                        break;
                    case 3:
                        $data['state_text'] = '拼团失败';
                        $data['trace'][0]['content'] = '拼团超时，资金原路返还';
                }
                //拼团中的订单不能取消
                $data['cancel_type'] = $data['group_shopping_state'] == 1 && $data['order_state'] == 20 ? 1 : 0;
            }
        } else {
            $data = $order->getOrderDetail($map);
        }

        if ($data == false) {
            return $this->responseJson(Message::EMPTY_CODE, $order->getFirstError(Message::MODEL_ERROR));
        }
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }

    /**
     * @return mixed
     * @author coder <know1111@vip.qq.com>
     * 修改订单页面-查询
     */
    public function actionModifyView()
    {
        $post = Yii::$app->request->post();
        //获取订单id
        if (empty($post['order_id'])) {
            return $this->responseJson(
                Message::REQUIRE_PARAMETER_CODE,
                Message::REQUIRE_PARAMETER_MSG
            );
        }

        $map['orders.order_id'] = $post['order_id'];
        $map['orders.buyer_id'] = $this->member_id;
        $map['orders.delete_state'] = 0;

        $orderModel = new Orders();
        $orderDetail = $orderModel->getOrderComm($map);
        if ($orderDetail == false) {
            return $this->responseJson(Message::NULL_CODE, Message::NULL_MSG);
        }
        //判断是否为快递订单
        $is_delivery_order = OrderGoods::find()->alias('a')
            ->leftJoin(Goods::tableName().' b','b.goods_id = a.goods_id')
            ->where(['and',['a.order_id' => $orderDetail['order_id']],['>','b.huawa_store_id',0]])
            ->select(['b.huawa_store_id'])
            ->column();
        /*数据封装开始*/
        $order['order_id'] = $orderDetail['order_id'];//订单ID
        $order['buyer_phone'] = $orderDetail['buyer_phone'];//下单人电话
        $order['order_message'] = $orderDetail['order_message'];//备注
        $order['deliver_explain'] = $orderDetail['deliver_explain'];//贺卡内容
        $order['is_delivery_order'] = 0;//是否为快递订单
        if (
            $order['order_state'] == 30 &&
            $order['huawa_state'] >= HUAWA_ORDER_UNPUBLISHED &&
            $order['huawa_state'] <= HUAWA_ORDER_MAKING
        ) {
            $order['popBoxStatus'] = '1';
        } else {
            $order['popBoxStatus'] = '0';
        }
        //配送信息
        $order['receiver']['daddress_id'] = $orderDetail['daddress_id'];
        $order['receiver']['reciver_info'] = $orderDetail['reciver_info'];
        $order['receiver']['reciver_province_id'] = $orderDetail['reciver_province_id'];
        $order['receiver']['reciver_city_id'] = $orderDetail['reciver_city_id'];
        $order['receiver']['reciver_area_id'] = $orderDetail['reciver_area_id'];
        $order['receiver']['reciver_tel'] = $orderDetail['reciver_tel'];
        $order['receiver']['reciver_name'] = $orderDetail['reciver_name'];
        //配送时间
        $order['delivery_time']['todate'] = $orderDetail['todate'];
        $order['delivery_time']['toshiduan'] = $orderDetail['toshiduan'];
        $order['delivery_time']['isup'] = $orderDetail['isup'];
        $order['delivery_time']['toshimite'] = $orderDetail['toshimite'];
        if($is_delivery_order){
            $order['is_delivery_order'] = 1;
            $order['delivery_time']['time_content'] = '快递商品不能修改配送时间！';
        }else{
            $order['delivery_time']['time_content'] = getDeliveryTime(
                $orderDetail['todate'],
                $orderDetail['toshiduan'],
                $orderDetail['isup'],
                $orderDetail['toshimite']
            );
        }
        /*数据封装结束*/

        $where['order_id'] = $order['order_id'];
        $orderModifyModel = new OrderModify();
        $orderModify = $orderModifyModel->getOrderModify($where);

        if ($orderModify) {
            $order = array_merge($order, $orderModify);
        } else {
            $order['address_status'] = '0';
            $order['delivery_time_status'] = '0';
            $order['card_content_status'] = '0';
            $order['your_phone_status'] = '0';
            $order['remarks_status'] = '0';
        }

        return $this->responseJson(
            Message::SUCCESS,
            Message::SUCCESS_MSG,
            $order
        );
    }

    /**
     * @return mixed
     * @throws \yii\db\Exception
     * @author coder <know1111@vip.qq.com>
     * 修改订单
     */
    public function actionModify()
    {
        //获取输入
        $post = Yii::$app->request->post();
        $orderModify = new OrderModify();
        //参数注入
        $orderModify->attributes = $post;
        //验证参数
        $validate = $orderModify->validate();
        if ($validate == false) {
            $err = array_keys($orderModify->errors)[0];
            return $this->responseJson(
                Message::ERROR,
                $orderModify->attributeLabels()[$err] .
                $orderModify->errors[0] .
                $orderModify->errors[$err][0]
            );
        }

        $updateOrder = [];
        $updateOrderCommon = [];
        $updateHuawa = [];
        //验证是否修改下单人手机号
        if (isset($post['buyer_phone'])) {
            if (strlen($post['buyer_phone']) >= 10) {
                $updateOrder['buyer_phone'] = $post['buyer_phone'];
            } else {
                return $this->responseJson(
                    Message::VALID_FAIL,
                    Message::VALID_FAIL_MSG
                );
            }
        }
        //验证是否修改备注
        if (isset($post['order_message'])) {
            $updateOrderCommon['order_message'] = $post['order_message'] = replaceSpecialChar($post['order_message']);
        }
        //验证是否修改贺卡内容
        if (isset($post['deliver_explain'])) {
            $updateOrderCommon['deliver_explain'] = $post['deliver_explain'] = replaceSpecialChar($post['deliver_explain']);
        }
        //验证是否修改配送时间
        if (isset($post['todate'])) {
            $updateOrder['todate'] = $post['todate'];
        }
        //验证是否修改时段
        if (isset($post['toshiduan'])) {
            $updateOrder['toshiduan'] = $post['toshiduan'];
        }
        //验证是否修改定时配送状态
        if (isset($post['isup'])) {
            $updateOrder['isup'] = $post['isup'];
        }
        //验证是否修改配送分钟
        if (isset($post['toshimite'])) {
            $updateOrder['toshimite'] = $post['toshimite'];
        }
        //验证是否修改地址ID
        if (isset($post['daddress_id'])) {
            $updateOrderCommon['daddress_id'] = $post['daddress_id'];
        }
        if (isset($post['reciver_info'])) {
            $updateOrderCommon['reciver_info'] = $post['reciver_info'];
        }
        if (isset($post['reciver_province_id'])) {
            $updateOrderCommon['reciver_province_id'] = $post['reciver_province_id'];
        }
        if (isset($post['reciver_city_id'])) {
            $updateOrderCommon['reciver_city_id'] = $post['reciver_city_id'];
        }
        if (isset($post['reciver_area_id'])) {
            $updateOrderCommon['reciver_area_id'] = $post['reciver_area_id'];
        }
        if (isset($post['reciver_tel'])) {
            $updateOrderCommon['reciver_tel'] = $post['reciver_tel'];
        }
        if (isset($post['reciver_name'])) {
            $updateOrderCommon['reciver_name'] = $post['reciver_name'];
        }

        $map['orders.order_id'] = $post['order_id'];
        $map['orders.buyer_id'] = $this->member_id;
        $map['orders.delete_state'] = 0;

        $orderModel = new Orders();
        $orderDetail = $orderModel->getOrderComm($map);

        //订单不存在或不是操作自己的订单返回签名验证失败
        if ($orderDetail == false) {
            return $this->responseJson(
                Message::SIGN_ERROR,
                Message::SIGN_ERROR_MSG
            );
        }

        //包月花和已关闭、配送中及以后状态不可修改
        if (
            $orderDetail['order_type'] == 99 ||
            $orderDetail['order_state'] != ORDER_STATE_PAY &&
            $orderDetail['order_state'] != ORDER_STATE_NEW &&
            (
                $orderDetail['order_state'] == ORDER_STATE_CONFIRM &&
                $orderDetail['huawa_state'] >= HUAWA_ORDER_DELIVERYING
            )
        ) {
            return $this->responseJson(Message::MATCH_FAIL, Message::MATCH_FAIL_MSG);
        }
        //快递订单不能修改配送时间
        if($orderDetail['order_type'] == 7){
            //快递订单不能修改配送时间
            unset($updateOrder['todate'],$updateOrder['toshiduan']);
        }
        //获取订单修改次数
        $where['order_id'] = $post['order_id'];
        $orderModifyModel = new OrderModify();
        $orderModify = $orderModifyModel->getOrderModify($where);
        $updateModify = [];
        $addAdminEditArray = [];

        //判断订单表字段是否有改动
        if (count($updateOrder) > 0) {
            //校验下单人电话
            $this->_actionOrderModifyDataCheck(
                $updateOrder,
                $updateModify,
                $orderDetail,
                $orderModify,
                'buyer_phone',
                'your_phone_status'
            );
            //判断是否修改配送时段
            $this->_actionOrderModifyDataCheck(
                $updateOrder,
                $updateModify,
                $orderDetail,
                $orderModify,
                'todate',
                'delivery_time_status'
            );
            $this->_actionOrderModifyDataCheck(
                $updateOrder,
                $updateModify,
                $orderDetail,
                $orderModify,
                'toshiduan',
                'delivery_time_status'
            );
            $this->_actionOrderModifyDataCheck(
                $updateOrder,
                $updateModify,
                $orderDetail,
                $orderModify,
                'isup',
                'delivery_time_status'
            );
            $this->_actionOrderModifyDataCheck(
                $updateOrder,
                $updateModify,
                $orderDetail,
                $orderModify,
                'toshimite',
                'delivery_time_status'
            );
        }
        //判断订单配送表字段是否有改动
        if (count($updateOrderCommon) > 0) {
            //校验订单备注
            $this->_actionOrderModifyDataCheck(
                $updateOrderCommon,
                $updateModify,
                $orderDetail,
                $orderModify,
                'order_message',
                'remarks_status'
            );
            //校验贺卡内容
            $this->_actionOrderModifyDataCheck(
                $updateOrderCommon,
                $updateModify,
                $orderDetail,
                $orderModify,
                'deliver_explain',
                'card_content_status'
            );
            //用户地址ID
            $this->_actionOrderModifyDataCheck(
                $updateOrderCommon,
                $updateModify,
                $orderDetail,
                $orderModify,
                'daddress_id',
                'address_status'
            );
            //地址信息
            $this->_actionOrderModifyDataCheck(
                $updateOrderCommon,
                $updateModify,
                $orderDetail,
                $orderModify,
                'reciver_info',
                'address_status'
            );
            //省份ID
            $this->_actionOrderModifyDataCheck(
                $updateOrderCommon,
                $updateModify,
                $orderDetail,
                $orderModify,
                'reciver_province_id',
                'address_status'
            );
            //城市ID
            $this->_actionOrderModifyDataCheck(
                $updateOrderCommon,
                $updateModify,
                $orderDetail,
                $orderModify,
                'reciver_city_id',
                'address_status'
            );
            //地区ID
            $this->_actionOrderModifyDataCheck(
                $updateOrderCommon,
                $updateModify,
                $orderDetail,
                $orderModify,
                'reciver_area_id',
                'address_status'
            );
            //收货人电话
            $this->_actionOrderModifyDataCheck(
                $updateOrderCommon,
                $updateModify,
                $orderDetail,
                $orderModify,
                'reciver_tel',
                'address_status'
            );
            //收货人名称
            $this->_actionOrderModifyDataCheck(
                $updateOrderCommon,
                $updateModify,
                $orderDetail,
                $orderModify,
                'reciver_name',
                'address_status'
            );
        }

        $updateOrderCount = count($updateOrder);
        $updateOrderCommonCount = count($updateOrderCommon);
        if ($updateOrderCount == 0 && $updateOrderCommonCount == 0) {
            return $this->responseJson(
                Message::ORDER_MODIFY_ERROR,
                Message::ORDER_MODIFY_MSG
            );
        } else {
            //如果发送到花娃且没有店铺接单则直接修改花娃订单
            if (
                $orderDetail['huawa_state'] > 0 &&
                $orderDetail['huawa_orderid'] != 0 &&
                $orderDetail['huawa_state'] <= 50
            ) {
                $orderInfo = HuawaApi::getInstance()->OC(
                    "index",
                    "get_order_info",
                    ['order_id' => $orderDetail['huawa_orderid']]);

                if ($orderInfo['status'] != 1) {
                    return $this->responseJson(
                        Message::NULL_CODE,
                        Message::NULL_MSG
                    );
                }

                $updateHuawa = $post;
                $updateHuawa['order_id'] = $orderDetail['huawa_orderid'];
            }
        }

        /*订单跟进表数据封装*/
        $addOrderFollow = [];
        //订花人电话
        $this->_actionOrderFollow(
            $addOrderFollow,
            $addAdminEditArray,
            $updateModify,
            'your_phone_status',
            $post['order_id'],
            '订花人电话',
            $orderDetail['buyer_phone'],
            $post['buyer_phone'],
            'send_mobile'
        );

        $distTimeOld = getDeliveryTime(
            $orderDetail['todate'],
            $orderDetail['toshiduan'],
            $orderDetail['isup'],
            $orderDetail['toshimite']
        );
        $distTimeNew = getDeliveryTime(
            $post['todate'],
            $post['toshiduan'],
            $post['isup'],
            $post['toshimite']
        );
        //配送时间
        $this->_actionOrderFollow(
            $addOrderFollow,
            $addAdminEditArray,
            $updateModify,
            'delivery_time_status',
            $post['order_id'],
            '配送时间',
            $distTimeOld,
            $distTimeNew,
            'delivery_date'
        );
        //订单备注
        $this->_actionOrderFollow(
            $addOrderFollow,
            $addAdminEditArray,
            $updateModify,
            'remarks_status',
            $post['order_id'],
            '订单备注',
            $orderDetail['order_message'],
            $post['order_message'],
            'remark'
        );
        //贺卡内容
        $this->_actionOrderFollow(
            $addOrderFollow,
            $addAdminEditArray,
            $updateModify,
            'card_content_status',
            $post['order_id'],
            '贺卡留言',
            $orderDetail['deliver_explain'],
            $post['deliver_explain'],
            'card_description'
        );

        if (isset($updateModify['address_status'])) {
            if ($orderDetail['reciver_info'] != $post['reciver_info']) {
                //配送地址
                $this->_actionOrderFollow(
                    $addOrderFollow,
                    $addAdminEditArray,
                    $updateModify,
                    'address_status',
                    $post['order_id'],
                    '配送地址',
                    $orderDetail['reciver_info'],
                    $post['reciver_info'],
                    'area_info'
                );
            }
            //收货人电话
            if ($orderDetail['reciver_tel'] != $post['reciver_tel']) {
                $this->_actionOrderFollow(
                    $addOrderFollow,
                    $addAdminEditArray,
                    $updateModify,
                    'address_status',
                    $post['order_id'],
                    '收花人电话',
                    $orderDetail['reciver_tel'],
                    $post['reciver_tel'],
                    'receive_mobile'
                );
            }
            //收货人名称
            if ($orderDetail['reciver_name'] != $post['reciver_name']) {
                $this->_actionOrderFollow(
                    $addOrderFollow,
                    $addAdminEditArray,
                    $updateModify,
                    'address_status',
                    $post['order_id'],
                    '收花人',
                    $orderDetail['reciver_name'],
                    $post['reciver_name'],
                    'receive_name'
                );
            }
        }
        /*订单跟进表数据封装*/

        $map1['order_id'] = $post['order_id'];
        //事务开启
        $transaction = Yii::$app->db->beginTransaction();
        try {
            if ($updateOrderCommonCount > 0) {
                $orderCommonModel = new OrderCommon();
                $orderCommonData = $orderCommonModel->updateAll($updateOrderCommon, $map1);
                if ($orderCommonData != 1) {
                    throw new \Exception('订单配送表更新失败');
                }
            }
            if ($updateOrderCount > 0) {
                $orderData = $orderModel->updateAll($updateOrder, $map1);
                if ($orderData != 1) {
                    throw new \Exception('订单表更新失败');
                }
            }
            $updateModify['order_id'] = $post['order_id'];

            if ($orderModify == false) {
                $orderModifyModel->isNewRecord = true;
                $orderModifyModel->setAttributes($updateModify, false);
                $orderModifyData = Yii::$app->db
                    ->createCommand()
                    ->insert('hua123_order_modify', $updateModify)
                    ->execute();
            } else {
                $orderModifyData = $orderModifyModel->updateAll($updateModify, $map1);
            }
            if ($orderModifyData != 1) {
                throw new \Exception('订单修改状态表更新失败');
            }

            /*添加跟进*/
            $orderFollowData = Yii::$app->db
                ->createCommand()
                ->batchInsert('hua123_order_follow', $this->_addOrderFollowField, $addOrderFollow)
                ->execute();
            if ($orderFollowData < 1) {
                throw new \Exception('订单跟进表新增失败');
            }
            /*添加跟进*/

            /*修改花娃*/
            if (count($updateHuawa) > 0) {
                //锁定花娃订单
                $lockOrder = HuawaApi::getInstance()->OC(
                    "index",
                    "lock_order",
                    [
                        'order_id' => $orderDetail['huawa_orderid'],
                        'is_lock' => '1'
                    ]
                );
                if ($lockOrder['status'] == false) {
                    throw new \Exception('锁定花娃订单失败');
                }


                //修改花娃订单
                $editHuadiOrder = HuawaApi::getInstance()->OC("index", "edit_huadi_order", $updateHuawa);
                Log::writelog('xgdd',$editHuadiOrder);
                if ($editHuadiOrder['status'] == false) {
                    throw new \Exception('修改花娃订单失败');
                }

                //解锁花娃订单
                $lockOrder = HuawaApi::getInstance()->OC(
                    "index",
                    "lock_order",
                    [
                        'order_id' => $orderDetail['huawa_orderid'],
                        'is_lock' => '0'
                    ]
                );
                if ($lockOrder['status'] == false) {
                    throw new \Exception('解锁花娃订单失败');
                }

                /*添加待办*/
                $orderEditHistoryData = Yii::$app->db
                    ->createCommand()
                    ->batchInsert(
                        'hua123_admin_order_edit_history',
                        $this->_addOrderEditHistoryField,
                        $addAdminEditArray
                    )
                    ->execute();
                if ($orderEditHistoryData < 1) {
                    throw new \Exception('订单待办新增失败');
                }
                /*添加待办*/
            }
            /*修改花娃*/

            $transaction->commit();
        } catch (\Exception $e) {
            $transaction->rollBack();
            Log::writelog('xgdd',$e->getMessage());
            return $this->responseJson(Message::MODEL_ERROR, $e->getMessage());
        }

        return $this->responseJson(Message::SUCCESS, '修改成功');
    }

    /**
     * @param array $updateArray 要更新的字段组
     * @param array $updateModifyArray 要更新的订单状态字段组
     * @param array $orderDetail 订单表与订单配送表数据
     * @param array|null $orderModify 订单修改状态表
     * @param string $field 当前校验字段名
     * @param string $fieldStatus 当前校验字段的更新状态
     * 订单修改参数校验
     */
    private function _actionOrderModifyDataCheck(
        array &$updateArray,
        array &$updateModifyArray,
        array $orderDetail,
        $orderModify,
        $field,
        $fieldStatus
    )
    {
        //判断是否修改该字段
        if (isset($updateArray[$field])) {
            //判断是否已经修改过该字段，存在则移除
            if ($orderModify != false && $orderModify[$fieldStatus] == 1) {
                unset($updateArray[$field]);
            } else {
                //判断该字段是否有改动，无改动则移除，有改动则更新
                if ($updateArray[$field] == $orderDetail[$field]) {
                    unset($updateArray[$field]);
                } else {
                    $updateModifyArray[$fieldStatus] = 1;
                }
            }
        }
    }

    /**
     * @param array $addOrderFollow 订单跟进表新增字段组
     * @param array $addAdminEditArray 待办信息记录字段组
     * @param array $updateModify 修改订单表更新字段组
     * @param string $status 当前字段修改状态
     * @param int $orderId 订单ID
     * @param string $content 跟进内容
     * @param string $oldValue 更新前内容
     * @param string $newValue 更新后内容
     * @param string $field 跟进字段
     * 跟进表与待办表数据封装
     */
    private function _actionOrderFollow(
        array &$addOrderFollow,
        array &$addAdminEditArray,
        array $updateModify,
        $status,
        $orderId,
        $content,
        $oldValue,
        $newValue,
        $field
    )
    {
        if (isset($updateModify[$status])) {
            /*跟进表*/
            $content = sprintf(
                '将%s “ %s ” 改为 “ %s ”',
                $content,
                $oldValue,
                $newValue
            );

            $add = [
                0, $this->_huaDiUser, TIMESTAMP, $content,
                0, '', $orderId, 3, '', 0, 0, 0
            ];
            $addOrderFollow[] = $add;
            /*跟进表*/

            /*待办表*/
            $addAdminEditArray[] = [
                $orderId,
                0,
                $this->_huaDiUser,
                $field,
                $oldValue,
                $newValue,
                0,
                TIMESTAMP,
                0
            ];
            /*待办表*/
        }
    }

    /**
     * 订单取消
     * @return mixed
     */
    public function actionCancel()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        $refund_id = (int)Yii::$app->request->post('refund_id',0);
        $refund_remark = (string)Yii::$app->request->post('refund_remark','客户取消订单');
        if (!$order_id) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        if($refund_remark){
            $length = mb_strlen($refund_remark);
            if($length > 300){
                return $this->responseJson(Message::ERROR, '退款原因字数不能超过300字!');
            }
        }
        $voucher_return = false; //退还优惠券
        $cancel = false; //未发送至花娃直接取消订单
        $transaction = Yii::$app->db->beginTransaction();
        $cancel_type = 0;
        // 花递订单，如果花娃还未接单，则直接退款
        $is_direct_refund = false;
        try {
            $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
            if (empty($order)) {
                throw new \Exception('订单不存在或已删除');
            }
            if(SITEID == 258){
                //拼团中的订单不能取消
                if($order->group_shopping_state == 1){//能在此处判断的订单都是已支付的，没拼成的订单不能取消
                    throw new \Exception('拼团中的商品暂不能取消订单，拼团成功后可以进行取消，如果24小时内拼团失败，则自动为您退款');
                }

                //包月花订单 取消订单  TODO
                if($order->order_state >= 20 && $order->huawa_state == 0){
                    //hua123发单已加锁 并发问题可解决  故直接退款即可
                    $cancel = true;
                    $cancel_type = 2;
                }elseif($order->order_state >= 20 && $order->huawa_state > 0){
                    $cancel = true;
                    $cancel_type = 1;
                } elseif ($order->order_state == 10 && $order->delivery_type == 1 && $order->delivery_store_id > 0 && $order->huawa_orderid > 0) {   // 如果是未付款并且已经推给花娃的订单
                    $order_data = HuawaApi::getInstance()->OC("index", "order_cancel_huadi_no_pay", array("order_id" => $order->huawa_orderid, 'cancel_reason' => '客户取消订单'));
                    if ($order_data['status'] != 1) {
                        throw new \Exception('订单取消失败，请重试1' . $order_data['msg']);
                    }
                    $order->order_state = Orders::ORDER_STATE_FAIL;
                    $voucher_return = true;
                } else{
                    $order->order_state = Orders::ORDER_STATE_FAIL;
                    $voucher_return = true;
                }
            }else{
                if ($order->order_state != ORDER_STATE_NEW) {
                    throw new \Exception('您的订单正在分配花店，暂不支持退款');
                }
                $order->order_state = Orders::ORDER_STATE_FAIL;
                $voucher_return = true;
            }

            if($cancel){
                $exist = RefundReturn::findOne(['order_id' => $order->order_id]);
                if ($exist) {
                    throw new \Exception('正在处理中，请不要重复提交');
                }
                //是否重置后台所有管理员状态
                $reset = false;
                //是否需要取消花娃订单(如已取消就不需要)
                $huawa_order_cancel = false;
                //向花娃申请退款
                $refund_huawa = false;
                if($cancel_type == 1){
                    //订单状态同步问题
                    $order_data = HuawaApi::getInstance()->OC('index', 'get_order_info', array('order_id' => $order->huawa_orderid));
                    if ($order_data['status'] != 1) {
                        throw new \Exception('当前订单暂不支持取消订单，如需帮助请联系客服');
                    }
                    //花娃订单已取消或退款中 但这时又产生了三方配单
                    // 反过来第三方订单正在配送但花娃又在配送，所以这里是并行的情况
                    if ($order->is_third) {
                        //第三方配送直接生成找花店退款
                        $state = AdminOrderState::instance()->resetAdminState($order->order_id, 'is_store_refund', 1);
                        if (!$state) {
                            throw new \Exception("订单取消失败，请稍后重试");
                        }
                        $reset = true;
                    }

                    //花娃状态没在已取消里面
                    if (!in_array($order_data['data']['order_state'], array(HUAWA_PLACE_ORDER_CANCEL)) && $order->is_third == 0) {
                        //未接单直接取消
                        if (in_array($order_data['data']['order_state'], array(HUAWA_ORDER_EXPIRE, HUAWA_ORDER_NO_PAY, HUAWA_ORDER_UNPUBLISHED_UNSPECIFIE, HUAWA_ORDER_UNPUBLISHED))) {
                            $order_data = HuawaApi::getInstance()->OC("index", "order_cancel", array("order_id" => $order->huawa_orderid, 'cancel_reason' => '客户取消订单'));
                            if ($order_data['status'] != 1) {
                                throw new \Exception('订单取消失败，请重试');
                            }
                            $huawa_order_cancel = true;
                            $voucher_return = true;
                            $is_direct_refund = true;
                        } else {
                            //花娃正在退款或者已退款，那就不找花店退款了
                            if (!in_array($order_data['data']['order_state'], array(HUAWA_ORDER_STATUS_REFUND, HUAWA_ORDER_STATUS_REFUND_SUCCESS))) {
                                $data = array();
                                $data['order_id'] = $order->huawa_orderid;
                                $data['refund_amount'] = $order->cb_amount;
                                $data['refund_all'] = 1;
                                $data['refund_reason'] = '客户取消订单';
                                $data['attachment'] = '';
                                $result = HuawaApi::getInstance()->OC('index', 'order_refund', $data);
                                if ($result['status'] != 1) {
                                    throw new \Exception('申请退款失败，请稍后再试');
                                }
                                $refund_huawa = true;
                            }
                        }
                    }
                }elseif($cancel_type == 2){
                    $refund_huawa = false;
                    $huawa_order_cancel = true;
                    $reset = true;
                    $is_direct_refund = true;
                    $voucher_return = true;
                }

                if (!$reset) {
                    //不产生找花店退款的情况下重置其他所有管理员状态
                    $state = AdminOrderState::instance()->resetAdminState($order->order_id);
                    if (!$state) {
                        throw new \Exception("订单取消失败，请稍后重试");
                    }
                }
                //如果已向花店申请退款就将订单置为售后流程

                //添加退款记录
                $refund = new RefundReturn();
                $refund->order_id = $order->order_id;
                $refund->order_sn = $order->order_sn;
                $refund->refund_sn = Orders::makeSn(3);
                $refund->store_id = $order->delivery_store_id;
                $refund->store_name = $order->delivery_store_name;
                $refund->buyer_id = $order->buyer_id;
                $refund->buyer_name = $order->buyer_name;
                $refund->goods_id = 0;
                $refund->order_goods_id = 0;
                $refund->goods_name = '';
                $refund->goods_num = 0;
                $refund->refund_amount = $order->order_amount;
                $refund->goods_image = '';
                $refund->order_goods_type = $order->order_type;
                //申请类型:1为退款,2为退货,默认为1
                $refund->refund_type = 1;
                if ($refund_huawa) {
                    //花娃审核通过后才退
                    $refund->seller_state = RefundReturn::REFUND_SELLER_DEFAULT;
                    $refund->refund_state = RefundReturn::REFUND_STATE_CHECK;
                } else {
                    //花娃订单已经取消直接退
                    $refund->seller_state = RefundReturn::REFUND_SELLER_AGREE;
                    $refund->refund_state = RefundReturn::REFUND_STATE_NEW;
                }
                //退款方式
                $refund->refund_money_to = RefundReturn::REFUND_WAY_ORIGINAL;
                //退货类型:1为不用退货,2为需要退货,默认为1
                $refund->return_type = 1;
                $refund->goods_state = $order->order_state;
                $refund->add_time = TIMESTAMP;
                $refund->seller_time = TIMESTAMP;
                $refund->reason_id = $refund_id;
                $refund->reason_info = $refund_remark;
                $refund->pic_info = '';
                $refund->buyer_message = $refund_remark;
                $refund->admin_time = TIMESTAMP; //后台会根据这个时间先后向银行退款
                $refund->admin_name = '系统'; //后台会根据这个时间先后向银行退款

                // 花递订单花娃未接单，取消订单，就直接退款
                if (SITEID == 258 && $is_direct_refund) {
                    $refund->refund_state = RefundReturn::REFUND_STATE_WAIT;
                }

                $result = $refund->insert(false);
                if (!$result) {
                    throw new \Exception('取消失败，请重试');
                }
                //修改订单
                //退款状态:0是无退款,1是全部退款,2是部分退款
                $order->refund_state = 1;
                $order->refund_time = TIMESTAMP;
                $order->refund_amount = $refund->refund_amount;
                if ($refund_huawa) {
                    $order->order_state = ORDER_STATE_REFUND;
                } else {
                    $order->order_state = ORDER_STATE_FAIL;
                }
                if ($huawa_order_cancel) {
                    $order->huawa_state = HUAWA_PLACE_ORDER_CANCEL;
                }
                if (!$result) {
                    throw new \Exception('取消失败，请重试');
                }
                $order->order_state = Orders::ORDER_STATE_REFUND;

                //19年感恩节限时购取消订单恢复购买上限
                if(SITEID == 258){
                    $goods_infos = OrderGoods::find()->select("goods_id,goods_num,goods_name")->where(["order_id" => $order->order_id])->asArray()->all();
                    foreach ($goods_infos as $goods_info) {
                        $xianshi_info = PXianshiGoods::instance()->getXianshiGoodsInfoByGoodsID($goods_info['goods_id']);
                        if ($xianshi_info) {
                            $result = PXianshiGoods::updateAll(['upper_limit' => new Expression('`upper_limit`+' . $goods_info['goods_num'])], ['xianshi_goods_id' => $xianshi_info['xianshi_goods_id']]);
                            if (!$result) {
                                throw new \Exception("限时购商品更新失败");
                            }
                            //恢复个人购买资格
                            $result = (new PXianshiMemberGoods())->recoverXianshi($order->buyer_id,$goods_info['goods_id'],$goods_info['goods_num'],$xianshi_info['start_time'],$xianshi_info['end_time']);
                            if(!$result){
                                throw new \Exception("个人限时购商品购买资格更新失败");
                            }
                        }
                    }
                }
            }
            $result = $order->save();
            if (!$result) {
                throw new \Exception('取消失败，请重试');
            }
            $refund_reason = '用户取消';
            if($refund_id || $refund_remark){
                $refund_reason = $refund_remark ? $refund_remark : (isset($this->refund_reason_list[$refund_id]) ? $this->refund_reason_list[$refund_id] : '其他' );
            }
            $result = OrderLog::addBuyerLog($order, '您取消了订单' . '(' . $refund_reason . ')' );
            if (!$result) {
                throw new \Exception('取消失败，请重试');
            }

            // 如果是直接退款
            if ($is_direct_refund) {
                $result = OrderLog::addBuyerLog($order, '您的退款将在1-3个工作日退回到您的支付账户中' . '(' . $refund_reason . ')' );
                if (!$result) {
                    throw new \Exception('取消失败，请重试');
                }
            }

            if($voucher_return){
                $voucher = Voucher::findOne(['voucher_order_id' => $order_id]);
                if ($voucher) {
                    $voucher->voucher_order_id = 0; //订单编号滞空
                    $voucher->voucher_state = 1; //状态更改为未用
                    $voucher_res = $voucher->save(false);
                    if (!$voucher_res) {
                        Log::writelog('voucher_save_errors', json_encode($voucher->getErrors()));
                        throw new \Exception('优惠券更改状态失败！');
                    }
                }
            }

            // 如果是已经退款的订单，取消，则需要发送微信模板消息
//            if ($cancel_type) {
//                send_weixin_huadi_refund($order_id, '主动取消订单');
//            }

            //手动申请退款的订单发送订阅消息
//            $goods_info = OrderGoods::find()->where(['order_id'=>$order_id])->select("goods_name")->asArray()->one();
//            $msg_data = [
//                'number1' => ['value' => $order->order_sn],
//                'thing2' => ['value' => $goods_info['goods_name']],//商品名称
//                'amount3' => ['value' => $order->total_amount],//订单金额
//            ];
//            WeixinSubscribeMsg::sendMsg($msg_data,$this->member_info['member_wxopenid'],WeixinSubscribeMsg::ORDER_REFUND);

            $transaction->commit();
            $trace = Orders::instance()->getOrderStateTrace($order);
            return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $trace);
        } catch (\Exception $e) {
            $transaction->rollBack();
            return $this->responseJson(Message::ERROR, $e->getMessage());
        }
    }

    /**
     * 订单删除
     * @return mixed
     */
    public function actionDelete()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        if (!$order_id) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        $transaction = Yii::$app->db->beginTransaction();
        try {
            $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
            if (empty($order)) {
                throw new \Exception('订单不存在或已删除');
            }
            if ($order->order_state == ORDER_STATE_REFUND) {
                $exist = RefundReturn::findOne(['order_id' => $order_id]);
                if ($exist->refund_state < 3) {
                    throw new \Exception('订单正在退款处理中，不能删除');
                }
            }
            $order->delete_state = 1;
            $result = $order->save();
            if (!$result) {
                throw new \Exception('删除失败，请重试');
            }
            $result = OrderLog::addBuyerLog($order, '订单已删除(本人)');
            if (!$result) {
                throw new \Exception('删除失败，请重试');
            }
            //20190716 新需求  删除订单则删除所有该订单历史通知   slx
            $result = Notify::updateAll(['is_delete' => 1, 'delete_time' => TIMESTAMP], ['extra_id' => $order_id]);
            if (!$result) {
                throw new \Exception('删除失败，请重试');
            }
            $transaction->commit();
            return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG);
        } catch (\Exception $e) {
            $transaction->rollBack();
            return $this->responseJson(Message::ERROR, $e->getMessage());
        }
    }

    /**
     * 订单退款（取消订单仅退款）
     * @return mixed
     */
    public function actionRefund()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        $refund_id = (int)Yii::$app->request->post('refund_id',0);
        $refund_remark = (string)Yii::$app->request->post('refund_remark','客户取消订单');
        if (!$order_id) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        if($refund_remark){
            $length = mb_strlen($refund_remark);
            if($length > 300){
                return $this->responseJson(Message::ERROR, '退款原因字数不能超过300字!');
            }
        }
        $voucher_return = false; //退还优惠券
        $cancel = false; //未发送至花娃直接取消订单
        $transaction = Yii::$app->db->beginTransaction();
        $cancel_type = 0;
        // 花递订单，如果花娃还未接单，则直接退款
        $is_direct_refund = false;
        try {
            $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
            if (empty($order)) {
                throw new \Exception('订单不存在或已删除');
            }
            if(SITEID == 258){
                //拼团中的订单不能取消
                if($order->group_shopping_state == 1){//能在此处判断的订单都是已支付的，没拼成的订单不能取消
                    throw new \Exception('拼团中的商品暂不能取消订单，拼团成功后可以进行取消，如果24小时内拼团失败，则自动为您退款');
                }

                //包月花订单 取消订单  TODO
                if($order->order_state >= 20 && $order->huawa_state == 0){
                    //hua123发单已加锁 并发问题可解决  故直接退款即可
                    $cancel = true;
                    $cancel_type = 2;
                }elseif($order->order_state >= 20 && $order->huawa_state > 0){
                    $cancel = true;
                    $cancel_type = 1;
                } elseif ($order->order_state == 10 && $order->delivery_type == 1 && $order->delivery_store_id > 0) {   // 如果是未付款并且已经推给花娃的订单
                    $order_data = HuawaApi::getInstance()->OC("index", "order_cancel_huadi_no_pay", array("order_id" => $order->huawa_orderid, 'cancel_reason' => '客户取消订单'));
                    if ($order_data['status'] != 1) {
                        throw new \Exception('订单取消失败，请重试');
                    }
                    $order->order_state = Orders::ORDER_STATE_FAIL;
                    $voucher_return = true;
                } else{
                    $order->order_state = Orders::ORDER_STATE_FAIL;
                    $voucher_return = true;
                }
            }else{
                if ($order->order_state != ORDER_STATE_NEW) {
                    throw new \Exception('您的订单正在分配花店，暂不支持退款');
                }
                $order->order_state = Orders::ORDER_STATE_FAIL;
                $voucher_return = true;
            }

            if($cancel){
                $exist = RefundReturn::findOne(['order_id' => $order->order_id]);
                if ($exist) {
                    throw new \Exception('正在处理中，请不要重复提交');
                }
                //是否重置后台所有管理员状态
                $reset = false;
                //是否需要取消花娃订单(如已取消就不需要)
                $huawa_order_cancel = false;
                //向花娃申请退款
                $refund_huawa = false;
                if($cancel_type == 1){
                    //订单状态同步问题
                    $order_data = HuawaApi::getInstance()->OC('index', 'get_order_info', array('order_id' => $order->huawa_orderid));
                    if ($order_data['status'] != 1) {
                        throw new \Exception('当前订单暂不支持取消订单，如需帮助请联系客服');
                    }
                    //花娃订单已取消或退款中 但这时又产生了三方配单
                    // 反过来第三方订单正在配送但花娃又在配送，所以这里是并行的情况
                    if ($order->is_third) {
                        //第三方配送直接生成找花店退款
                        $state = AdminOrderState::instance()->resetAdminState($order->order_id, 'is_store_refund', 1);
                        if (!$state) {
                            throw new \Exception("订单取消失败，请稍后重试");
                        }
                        $reset = true;
                    }

                    //花娃状态没在已取消里面
                    if (!in_array($order_data['data']['order_state'], array(HUAWA_PLACE_ORDER_CANCEL)) && $order->is_third == 0) {
                        //未接单直接取消
                        if (in_array($order_data['data']['order_state'], array(HUAWA_ORDER_EXPIRE, HUAWA_ORDER_NO_PAY, HUAWA_ORDER_UNPUBLISHED_UNSPECIFIE, HUAWA_ORDER_UNPUBLISHED))) {
                            $order_data = HuawaApi::getInstance()->OC("index", "order_cancel", array("order_id" => $order->huawa_orderid, 'cancel_reason' => '客户取消订单'));
                            if ($order_data['status'] != 1) {
                                throw new \Exception('订单取消失败，请重试');
                            }
                            $huawa_order_cancel = true;
                            $voucher_return = true;
                            $is_direct_refund = true;
                        } else {
                            //花娃正在退款或者已退款，那就不找花店退款了
                            if (!in_array($order_data['data']['order_state'], array(HUAWA_ORDER_STATUS_REFUND, HUAWA_ORDER_STATUS_REFUND_SUCCESS))) {
                                $data = array();
                                $data['order_id'] = $order->huawa_orderid;
                                $data['refund_amount'] = $order->cb_amount;
                                $data['refund_all'] = 1;
                                $data['refund_reason'] = '客户取消订单';
                                $data['attachment'] = '';
                                $result = HuawaApi::getInstance()->OC('index', 'order_refund', $data);
                                if ($result['status'] != 1) {
                                    throw new \Exception('申请退款失败，请稍后再试');
                                }
                                $refund_huawa = true;
                            }
                        }
                    }
                }elseif($cancel_type == 2){
                    $refund_huawa = false;
                    $huawa_order_cancel = true;
                    $reset = true;
                    $is_direct_refund = true;
                    $voucher_return = true;
                }

                if (!$reset) {
                    //不产生找花店退款的情况下重置其他所有管理员状态
                    $state = AdminOrderState::instance()->resetAdminState($order->order_id);
                    if (!$state) {
                        throw new \Exception("订单取消失败，请稍后重试");
                    }
                }
                //如果已向花店申请退款就将订单置为售后流程

                //添加退款记录
                $refund = new RefundReturn();
                $refund->order_id = $order->order_id;
                $refund->order_sn = $order->order_sn;
                $refund->refund_sn = Orders::makeSn(3);
                $refund->store_id = $order->delivery_store_id;
                $refund->store_name = $order->delivery_store_name;
                $refund->buyer_id = $order->buyer_id;
                $refund->buyer_name = $order->buyer_name;
                $refund->goods_id = 0;
                $refund->order_goods_id = 0;
                $refund->goods_name = '';
                $refund->goods_num = 0;
                $refund->refund_amount = $order->order_amount;
                $refund->goods_image = '';
                $refund->order_goods_type = $order->order_type;
                //申请类型:1为退款,2为退货,默认为1
                $refund->refund_type = 1;
                if ($refund_huawa) {
                    //花娃审核通过后才退
                    $refund->seller_state = RefundReturn::REFUND_SELLER_DEFAULT;
                    $refund->refund_state = RefundReturn::REFUND_STATE_CHECK;
                } else {
                    //花娃订单已经取消直接退
                    $refund->seller_state = RefundReturn::REFUND_SELLER_AGREE;
                    $refund->refund_state = RefundReturn::REFUND_STATE_NEW;
                }
                //退款方式
                $refund->refund_money_to = RefundReturn::REFUND_WAY_ORIGINAL;
                //退货类型:1为不用退货,2为需要退货,默认为1
                $refund->return_type = 1;
                $refund->goods_state = $order->order_state;
                $refund->add_time = TIMESTAMP;
                $refund->seller_time = TIMESTAMP;
                $refund->reason_id = $refund_id;
                $refund->reason_info = $refund_remark;
                $refund->pic_info = '';
                $refund->buyer_message = $refund_remark;
                $refund->admin_time = TIMESTAMP; //后台会根据这个时间先后向银行退款
                $refund->admin_name = '系统'; //后台会根据这个时间先后向银行退款

                // 花递订单花娃未接单，取消订单，就直接退款
                if (SITEID == 258 && $is_direct_refund) {
                    $refund->refund_state = RefundReturn::REFUND_STATE_WAIT;
                }

                $result = $refund->insert(false);
                if (!$result) {
                    throw new \Exception('取消失败，请重试');
                }
                //修改订单
                //退款状态:0是无退款,1是全部退款,2是部分退款
                $order->refund_state = 1;
                $order->refund_time = TIMESTAMP;
                $order->refund_amount = $refund->refund_amount;
                if ($refund_huawa) {
                    $order->order_state = ORDER_STATE_REFUND;
                } else {
                    $order->order_state = ORDER_STATE_FAIL;
                }
                if ($huawa_order_cancel) {
                    $order->huawa_state = HUAWA_PLACE_ORDER_CANCEL;
                }
                if (!$result) {
                    throw new \Exception('取消失败，请重试');
                }
                $order->order_state = Orders::ORDER_STATE_REFUND;

                //19年感恩节限时购取消订单恢复购买上限
                if(SITEID == 258){
                    $goods_infos = OrderGoods::find()->select("goods_id,goods_num,goods_name")->where(["order_id" => $order->order_id])->asArray()->all();
                    foreach ($goods_infos as $goods_info) {
                        $xianshi_info = PXianshiGoods::instance()->getXianshiGoodsInfoByGoodsID($goods_info['goods_id']);
                        if ($xianshi_info) {
                            $result = PXianshiGoods::updateAll(['upper_limit' => new Expression('`upper_limit`+' . $goods_info['goods_num'])], ['xianshi_goods_id' => $xianshi_info['xianshi_goods_id']]);
                            if (!$result) {
                                throw new \Exception("限时购商品更新失败");
                            }
                            //恢复个人购买资格
                            $result = (new PXianshiMemberGoods())->recoverXianshi($order->buyer_id,$goods_info['goods_id'],$goods_info['goods_num'],$xianshi_info['start_time'],$xianshi_info['end_time']);
                            if(!$result){
                                throw new \Exception("个人限时购商品购买资格更新失败");
                            }
                        }
                    }
                }
            }
            $result = $order->save();
            if (!$result) {
                throw new \Exception('取消失败，请重试');
            }
            $refund_reason = '用户取消';
            if($refund_id || $refund_remark){
                $refund_reason = $refund_remark ? $refund_remark : (isset($this->refund_reason_list[$refund_id]) ? $this->refund_reason_list[$refund_id] : '用户取消!');
            }
            $result = OrderLog::addBuyerLog($order, '您取消了订单' . '(' . $refund_reason . ')' );
            if (!$result) {
                throw new \Exception('取消失败，请重试');
            }

            // 如果是直接退款
            if ($is_direct_refund) {
                $result = OrderLog::addBuyerLog($order, '您的退款将在1-3个工作日退回到您的支付账户中' . '(' . $refund_reason . ')' );
                if (!$result) {
                    throw new \Exception('取消失败，请重试');
                }
            }

            if($voucher_return){
                $voucher = Voucher::findOne(['voucher_order_id' => $order_id]);
                if ($voucher) {
                    $voucher->voucher_order_id = 0; //订单编号滞空
                    $voucher->voucher_state = 1; //状态更改为未用
                    $voucher_res = $voucher->save(false);
                    if (!$voucher_res) {
                        Log::writelog('voucher_save_errors', json_encode($voucher->getErrors()));
                        throw new \Exception('优惠券更改状态失败！');
                    }
                }
            }

            // 如果是已经退款的订单，取消，则需要发送微信模板消息
//            if ($cancel_type) {
//                send_weixin_huadi_refund($order_id, '主动取消订单');
//            }

            //手动申请退款的订单发送订阅消息
//            $goods_info = OrderGoods::find()->where(['order_id'=>$order_id])->select("goods_name")->asArray()->one();
//            $msg_data = [
//                'number1' => ['value' => $order->order_sn],
//                'thing2' => ['value' => $goods_info['goods_name']],//商品名称
//                'amount3' => ['value' => $order->total_amount],//订单金额
//            ];
//            WeixinSubscribeMsg::sendMsg($msg_data,$this->member_info['member_wxopenid'],WeixinSubscribeMsg::ORDER_REFUND);

            $transaction->commit();
            $trace = Orders::instance()->getOrderStateTrace($order);
            return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $trace);
        } catch (\Exception $e) {
            $transaction->rollBack();
            return $this->responseJson(Message::ERROR, $e->getMessage());
        }
    }

    /**
     * 19年12月 1.0.10版本取消10min后再试的返回 出现这种情况是因为原订单还未发送到花娃，不能退款
     * 1、添加一条此种订单的定时任务处理的退款记录
     * 2、添加一条退款记录
     * @param $order Object 订单对象
     * @return bool
     */
    private function hideTenMinHandle($order){
        $check = OrderNoPushRefund::find()->where(['order_id'=>$order->order_id])->count();
        if($check){
            return true;
        }
        $result = OrderLog::addBuyerLog($order, '取消订单成功，正在受理');
        if (!$result) {
            return false;
        }
        $model = new OrderNoPushRefund();
        $model->order_id = $order->order_id;
        $model->handle_time = TIMESTAMP;
        $result = $model->save();
        if (!$result){
            return false;
        }
        return true;
    }
    public function actionHuadiService(){
        $order_id = (int)Yii::$app->request->post('order_id');
        $code = 1;
        $msg = '';
        if (!$order_id) {
            $code = 0;
            $msg = '参数错误';
        }
        $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
        if (empty($order)) {
            $code = 0;
            $msg = '订单不存在或已删除';
        }
        $exist = RefundReturn::findOne(['order_id' => $order_id]);
        if ($exist) {
            $code = 0;
            $msg = '您已经申请过了';
        }
        return $this->responseJson($code, $msg);
    }
    /**
     * 申请售后退货退款
     * @return mixed
     */
    public function actionService()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        if (!$order_id) {
            return $this->responseJson(Message::ERROR, Message::EMPTY_MSG);
        }
        $param = Yii::$app->request->post();
        $reason_id = (int)$param['reason_id'];
        $reason_info = (string)$param['reason_info'];
        if (!$reason_id || !$reason_id) {
            return $this->responseJson(Message::ERROR, '请选择申请原因');
        }
        //退款状态:0是无退款,1是全部退款,2是部分退款
        $refund_type = in_array($param['refund_type'], [1, 2]) ? $param['refund_type'] : 1;
        $refund_amount = (float)$param['refund_amount'];
        $buyer_message = isset($param['buyer_message']) ? $param['buyer_message'] : '';
//        if ($buyer_message == '') {
//            return $this->responseJson(Message::ERROR, '请填写您的问题描述');
//        }
        if ($buyer_message != '' && mb_strlen($buyer_message, 'UTF-8') > 200) {
            return $this->responseJson(Message::ERROR, '问题描述最多200字');
        }
        if (!($refund_amount > 0) && $refund_type == 2) {
            return $this->responseJson(Message::ERROR, '退款金额需大于0');
        }

        //售后凭证
        $pic_info = isset($param['pic_info']) && $param['pic_info']? explode(',', $param['pic_info']) : '';
        if (!empty($pic_info) && is_array($pic_info)) {
            foreach ($pic_info as $pic) {
                if (!isImgName_wx($pic)) {
                    return $this->responseJson(Message::ERROR, '凭证图片有误');
                }
            }
        } else {
            $pic_info = '';
        }
        $transaction = Yii::$app->db->beginTransaction();
        try {
            $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
            if (empty($order)) {
                throw new \Exception('订单不存在或已删除');
            }
            if (!in_array($order->order_state, [ORDER_STATE_PAY, ORDER_STATE_CONFIRM])) {
                throw new \Exception('此订单不支持售后,如需帮助请联系客服');
            }
            if(SITEID != 258){
                if ($order->huawa_state >= HUAWA_ORDER_MAKING) {
                    throw new \Exception('暂无法申请售后,如需帮助请联系客服');
                }
                if (TIMESTAMP - $order->payment_time < 600) {
                    throw new \Exception('花店正在处理您的订单,10分钟过后再来吧，别担心确认收货前你都可申请退款');
                }
            }
            if ($order->is_third) {
                throw new \Exception('售后申请失败，如需帮助请联系客服');
            }
            $exist = RefundReturn::findOne(['order_id' => $order_id]);
            if ($exist) {
                throw new \Exception('您已经申请过了');
            }
            //全额退款与部分退款
            $refund_amount = $refund_type == 1 ? $order->order_amount : ($refund_amount > 0 && $refund_amount <= $order->order_amount ? $refund_amount : $order->order_amount);
            $refund_type = $refund_amount == $order->order_amount ? 1 : 2;
            //添加退款记录
            $refund = new RefundReturn();
            $refund->order_id = $order->order_id;
            $refund->order_sn = $order->order_sn;
            $refund->refund_sn = Orders::makeSn(3);
            $refund->store_id = $order->delivery_store_id;
            $refund->store_name = $order->delivery_store_name;
            $refund->buyer_id = $order->buyer_id;
            $refund->buyer_name = $order->buyer_name;
            $refund->goods_id = 0;
            $refund->order_goods_id = 0;
            $refund->goods_name = '';
            $refund->refund_amount = $refund_amount;
            //申请类型:1为退款,2为退货,默认为1
            $refund->refund_type = 1;
            $refund->seller_state = RefundReturn::REFUND_SELLER_DEFAULT;
            $refund->refund_state = RefundReturn::REFUND_STATE_CHECK;
            //退货类型:1为不用退货,2为需要退货,默认为1
            $refund->return_type = 2;
            $refund->add_time = TIMESTAMP;
            //退款倒计时处理
            $refund->deadline_time = $this->_IncreaseTimes();
            $refund->reason_id = $reason_id;
            $refund->reason_info = $reason_info;
            if(!empty($pic_info)){
                foreach ($pic_info as &$pic){
                    $pic = "http://cdn.ahj.cm/shop/service/".$pic;
                }
            }
            $refund->pic_info = !empty($pic_info) ? serialize($pic_info) : '';
            $refund->buyer_message = $buyer_message;
            if ($order->order_from < 5) {
                $refund->refund_money_to = RefundReturn::REFUND_WAY_ORIGINAL;
            } else {
                $refund->refund_money_to = RefundReturn::REFUND_WAY_THIRD;
            }
            $result = $refund->save(false);
            if (!$result) {
                throw new \Exception('申请失败，请重试');
            }
            //修改订单
            //退款状态:0是无退款,1是全部退款,2是部分退款
            $order->refund_state = $refund_type;
            $order->refund_time = TIMESTAMP;
            $order->refund_amount = $refund->refund_amount;
            $order->order_state = ORDER_STATE_REFUND;
            $result = $order->save();
            if (!$result) {
                throw new \Exception('申请失败，请重试');
            }
            $result = OrderLog::addBuyerLog($order, '订单已申请退款');
            if (!$result) {
                throw new \Exception('申请失败，请重试');
            }
            //20181127新流程，直接向花店申请退款
            $data = array();
            $data['order_id'] = $order->huawa_orderid;
            $data['delivery_type'] = $order->delivery_type;
            $data['refund_amount'] = $refund->refund_amount;
            $data['refund_all'] = $refund_type == 1 ? 1 : 0;
            $data['refund_reason'] = $reason_info;
            $data['attachment'] = $pic_info && !empty($pic_info) ? implode(',', $pic_info) : '';
            $result = HuawaApi::getInstance()->OC('index', 'order_refund', $data);
            if ($result['status'] != 1) {
                //throw new \Exception('申请退款失败，请稍后再试');
                throw new \Exception($result['msg']);
            }

            $transaction->commit();
            //$trace = Orders::instance()->getOrderStateTrace($order);
            return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG);
        } catch (\Exception $e) {
            $transaction->rollBack();
            return $this->responseJson(Message::ERROR, $e->getMessage());
        }
    }

    /**
     * 查看售后
     * @return mixed
     */
    public function actionServiceView()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        $device_type = Yii::$app->request->post('device_type','');
        if (!$order_id) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
        if (empty($order)) {
            return $this->responseJson(Message::ERROR, '订单不存在或已删除');
        }
        if ($order->order_state != ORDER_STATE_REFUND) {
            //2019年12月订单流程优化修改 订单未推送到花娃时取消了订单 售后进度查看
            $no_push_order = OrderNoPushRefund::find()->where(['order_id'=>$order_id])->select("handle_time")->one();
            if($no_push_order){
                return $this->noPushRefund($order, $no_push_order);
            }
            return $this->responseJson(Message::ERROR, '订单状态已发生变化');
        }
        $refund = RefundReturn::find()->where(['order_id' => $order->order_id])->orderBy('refund_id desc')->one();
        if (empty($refund)) {
            return $this->responseJson(Message::ERROR, '未找到售后信息');
        }
        if($order->siteid == 258 && isset($_POST['haofan']) && $_POST['haofan'] == 1){
            return $this->huadiServiceView($order,$refund);
        }
        //默认新申请
        $current_index = 0;
        $progress_tips = ['title' => '', 'content' => ''];
        //退款编号、添加时间、截止时间
        $progress_tips['refund_sn'] = isset($refund->refund_sn) ? $refund->refund_sn : '';
        $progress_tips['order_sn'] = isset($order->order_sn) ? $order->order_sn : '';
        $progress_tips['add_time'] = isset($refund->add_time) ? $refund->add_time : 0;
        $progress_tips['deadline'] = isset($refund->deadline_time) ? $refund->deadline_time : 0;
        $progress_tips['now_time'] = time();
        $progress_tips['admin_opr_time'] = isset($refund->admin_time) ? $refund->admin_time : '';
        $data = [];
        if(in_array($device_type,['applet_huadi','app_huadi','applet_aihuaju',"app_huadi_ios","app_huadi_android"])){
            if ($refund->refund_state == RefundReturn::REFUND_STATE_NEW) {
                $progress_tips['title'] = '待审核';
                if($order->order_state == HUAWA_ORDER_STATUS_REFUND_SUCCESS){
                    $progress_tips['content'] = '商家已同意退款，等待平台处理';
                }elseif ($order->order_state == HUAWA_ORDER_STATUS_REFUND_DISAGREE){
                    $progress_tips['content'] = '商家拒绝了您的退款，已进入平台申诉流程';
                }elseif($order->order_state == HUAWA_ORDER_STATUS_REFUND){
                    $progress_tips['content'] = '退款申请已提交，请耐心等待结果';
                }
                $data['button'] = [
                    [
                        'alias' => 'service_edit',
                        'name' => '修改申请',
                        'group' => 'A',
                        'extra' => [
                            'confirm_tip' => [
                                'title' => '您确定要修改申请吗？',
                                'subtitle' => ''
                            ]
                        ],
                    ],
                    [
                        'alias' => 'service_cancel',
                        'name' => '撤销申请',
                        'group' => 'B',
                        'extra' => [
                            'confirm_tip' => [
                                'title' => '您确定要取消售后吗？',
                                'subtitle' => '撤销后订单将返回至正常状态'
                            ]
                        ],
                    ],
                ];
                if(SITEID == 258){
                    $data['button'] = [];
                }
            } elseif (in_array($refund->refund_state, [RefundReturn::REFUND_STATE_ING,RefundReturn::REFUND_STATE_SUCCESS])) {
                $current_index = 2;
                $progress_tips['title'] = '申请结果';
                if (RefundReturn::REFUND_STATE_SUCCESS) {
                    $content = '申请退款成功。';
                    if ($refund->refund_money_to == RefundReturn::REFUND_WAY_BANK) {
                        $content .= '所支付款项将退款至您的银行卡';
                    } elseif ($refund->refund_money_to == RefundReturn::REFUND_WAY_BALANCE) {
                        $content .= '所支付款项将退款至您的余额账户';
                    } elseif ($refund->refund_money_to == RefundReturn::REFUND_WAY_ALIPAY) {
                        $content .= '所支付款项将退款至您的支付宝账户';
                    } elseif ($refund->refund_money_to == RefundReturn::REFUND_WAY_ORIGINAL) {
                        $content .= '所支付款项将退款至您的原付款账户';
                    } elseif ($refund->refund_money_to == RefundReturn::REFUND_WAY_THIRD) {
                        $content .= '所支付款项将退款至您的原下单平台';
                    }
                    $progress_tips['content'] = $content;
                } else {
                    $progress_tips['content'] = '申请退款失败。' . $refund->admin_message;
                }
                $data['button'] = [];
            } elseif ($refund->refund_state == RefundReturn::REFUND_STATE_CANCEL) {
                $current_index = 2;
                $progress_tips['title'] = '退款已撤销';
                $progress_tips['content'] = '退款已撤销。';
                $data['button'] = [];
            } else {
                //, RefundReturn::REFUND_STATE_FAIL 退款失败由客服处理
                $current_index = 1;
                $progress_tips['title'] = '审核中';
                $progress_tips['content'] = '客服正在审核中，请耐心等待结果';
                $data['button'] = [];
            }
            $data['current_index'] = $current_index;
            $data['progress_tips'] = $progress_tips;
        }else{
            if ($refund->refund_state == RefundReturn::REFUND_STATE_NEW) {
                $progress_tips['title'] = '待审核';
                $progress_tips['content'] = '退款申请已提交，请耐心等待结果';
            } elseif (in_array($refund->refund_state, [RefundReturn::REFUND_STATE_SUCCESS])) {
                $current_index = 2;
                $progress_tips['title'] = '申请结果';
                if (RefundReturn::REFUND_STATE_SUCCESS) {
                    $content = '申请退款成功。';
                    if ($refund->refund_money_to == RefundReturn::REFUND_WAY_BANK) {
                        $content .= '所支付款项将退款至您的银行卡';
                    } elseif ($refund->refund_money_to == RefundReturn::REFUND_WAY_BALANCE) {
                        $content .= '所支付款项将退款至您的余额账户';
                    } elseif ($refund->refund_money_to == RefundReturn::REFUND_WAY_ALIPAY) {
                        $content .= '所支付款项将退款至您的支付宝账户';
                    } elseif ($refund->refund_money_to == RefundReturn::REFUND_WAY_ORIGINAL) {
                        $content .= '所支付款项将退款至您的原付款账户';
                    } elseif ($refund->refund_money_to == RefundReturn::REFUND_WAY_THIRD) {
                        $content .= '所支付款项将退款至您的原下单平台';
                    }
                    $progress_tips['content'] = $content;
                } else {
                    $progress_tips['content'] = '申请退款失败。' . $refund->admin_message;
                }
            } elseif ($refund->refund_state == RefundReturn::REFUND_STATE_CANCEL) {
                $current_index = 2;
                $progress_tips['title'] = '退款已撤销';
                $progress_tips['content'] = '退款已撤销。';
            } else {
                //, RefundReturn::REFUND_STATE_FAIL 退款失败由客服处理
                $current_index = 1;
                $progress_tips['title'] = '审核中';
                $progress_tips['content'] = '客服正在审核中，请耐心等待结果';
            }
            $data['current_index'] = $current_index;
            $data['progress_tips'] = $progress_tips;
            $data['button'] = [];
        }

        if ($current_index == 0) {
            //新流程不可撤销
            //array_push($data['button'], ['alias' => 'service_cancel', 'name' => '撤销申请退款', 'group' => 'A', 'extra' => ['confirm_tip' => ['title' => '您确认要撤销售后吗?', 'subtitle' => '撤销后订单将返回至正常状态']]]);
        }
        $data['refund'] = [
            'reason' => isset($this->refund_reason_list[$refund->reason_id]) ? $this->refund_reason_list[$refund->reason_id] : '其他',
            'desc' => $refund->buyer_message,
            'pic' => $refund->pic_info ? array_map(function ($val) {
                return getImgUrl($val, ATTACH_SERVICE);
            }, unserialize($refund->pic_info)) : [],
        ];
        //处理 联系商家  接口联系信息
        $orders = new Orders();
        $data['connect_shop'] = $orders->getConnectShopInfo($order_id);
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }

    /**
     * 撤销退款申请（2019年12月订单流程优化修改）
     * @return mixed
     */
    public function actionCancelRefund()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
        if (empty($order)) {
            return $this->responseJson(Message::ERROR, '订单不存在或已删除');
        }
        $refund = RefundReturn::find()->where(['order_id' => $order->order_id])->one();
        if (empty($refund)) {
            //未推送到花娃的订单取消时的撤销
            $no_push = OrderNoPushRefund::find()->where(['order_id' => $order->order_id])->one();
            if($no_push){
                $transaction = Yii::$app->db->beginTransaction();
                try {
                    $result = OrderLog::addBuyerLog($order, '退款关闭，您撤销了退款申请');
                    if (!$result) {
                        throw new \Exception("申请失败");
                    }
                    $result = $no_push->delete();
                    if(!$result){
                        throw new \Exception("申请失败");
                    }
                    $transaction->commit();
                    return $this->responseJson(Message::SUCCESS, '撤销成功');
                }catch (\Exception $e){
                    $transaction->rollBack();
                    return $this->responseJson(Message::ERROR, '申请失败');
                }
            }
            return $this->responseJson(Message::ERROR, '未找到售后信息');
        }
        //已经真实发起退款申请的订单的撤销暂时需要产品确认是否可行，如可行，后续流程还需要完善（由目前代码的恢复为初始订单，是否需要改为恢复为发起退款申请时的状态）
        return $this->responseJson(Message::ERROR, '未找到售后信息');
        if($refund->refund_state != RefundReturn::REFUND_STATE_NEW && $refund->refund_state != RefundReturn::REFUND_STATE_CHECK){
            return $this->responseJson(Message::ERROR, '此退款申请不能撤销');
        }

        $transaction = Yii::$app->db->beginTransaction();
        try{
            $result = OrderLog::addBuyerLog($order, '退款关闭，您撤销了退款申请');
            if (!$result) {
                throw new \Exception("申请失败");
            }
            //删除退款记录
            $result = $refund->delete();
            if(!$result) {
                throw new \Exception("申请失败");
            }

            //恢复订单状态
            $order->order_state = ORDER_STATE_PAY;
            $order->refund_state = 0;
            $order->refund_time = 0;
            $order->refund_amount = 0;
            $order->sended = 0;
            $order->huawa_orderid = 0;
            $order->huawa_ordersn = '';
            $order->huawa_state = 0;
            $order->api_state = 0;
            $result = $order->save();
            if(!$result){
                throw new \Exception("申请失败");
            }
            $transaction->commit();
            return $this->responseJson(Message::SUCCESS, '撤销成功');
        }catch (\Exception $e){
            $transaction->rollBack();
            return $this->responseJson(Message::ERROR, '申请失败');
        }

    }

    /**
     * 申请售后原因
     * @return mixed
     */
    public function actionServiceReason()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        if (!$order_id) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
        if (empty($order)) {
            return $this->responseJson(Message::ERROR, '订单不存在或已删除');
        }
        $data = [];
        $data['refund_reason'] = RefundReason::getRefundReasons();
        $data['order'] = [
            'order_amount' => $order->order_amount
        ];

        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }

    /**
     * 确认收货
     * @return mixed
     */
    public function actionConfirm()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        if (!$order_id) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        $transaction = Yii::$app->db->beginTransaction();
        try {
            $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
            if (empty($order)) {
                throw new \Exception('订单不存在或已删除');
            }
            if (!in_array($order->order_state, [ORDER_STATE_PAY, ORDER_STATE_CONFIRM])) {
                throw new \Exception('订单状态已发生变化');
            }
//            if (!$order->accept_time) {
//                throw new \Exception('你的订单商家还未接单,暂时不能确认收货');
//            }

            if ($order->huawa_state < HUAWA_ORDER_DELIVERYING) {
                throw new \Exception('你的订单商家还未开始配送,暂时不能确认收货');
            }
            if ((TIMESTAMP - $order->payment_time) < 600) {
                throw new \Exception('暂时不能确认收货，请稍后再试');
            }
            $order->order_state = ORDER_STATE_SUCCESS;
            $order->finnshed_time = TIMESTAMP;
            $result = $order->save();
            if (!$result) {
                throw new \Exception('操作失败，请重试');
            }
            $result = OrderLog::addBuyerLog($order, '本人已确认收货');
            if (!$result) {
                throw new \Exception('操作失败，请重试');
            }

            // 完成订单赠送积分
            list($bool, $msg) = $this->_addHuadiConfirmScore($order);
            if (!$bool) {
                throw new \Exception($msg);
            }

            $transaction->commit();
            $trace = Orders::instance()->getOrderStateTrace($order);
            return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $trace);
        } catch (\Exception $e) {
            $transaction->rollBack();
            return $this->responseJson(Message::ERROR, $e->getMessage());
        }
    }

    /**
     * 完成订单赠送积分
     * @param $order
     * @return array
     */
    private function _addHuadiConfirmScore($order)
    {
        if (SITEID != 258) {
            return [true, ''];
        }
        // 订单完成增加积分
        $score = intval($order['order_amount'] * 0.1);
        // todo 测试
        $score = $score <= 0 ? 1 : $score;
        list($bool, $msg) = HuadiScoreLog::addLog($this->member_id, $score, HuadiScoreLog::TYPE_ADD, HuadiScoreLog::OPERATE_FINISH_ORDER, $order['order_sn']);
        if (!$bool) {
            return [false, $msg];
        }
        // 是否是第一次完成订单
        $condition = [
            'buyer_id' => $this->member_id,
            'delete_state' => 0,
            'order_state' => ORDER_STATE_SUCCESS,
            'finnshed_time' => ['eq', 0],
        ];

        // 第一笔订单增加5积分
        $order = Orders::find()->where($condition)->count();
        if ($order == 1) {
            list($bool, $msg) = HuadiScoreLog::addLog($this->member_id, HuadiScoreLog::SCORE_FINISH_FIRST_ORDER, HuadiScoreLog::TYPE_ADD, HuadiScoreLog::OPERATE_FINISH_FIRST_ORDER, $order['order_sn']);
            if (!$bool) {
                return [false, $msg];
            }
        }

        //发送订阅消息
        $score = $order == 1 ? $score + HuadiScoreLog::SCORE_FINISH_FIRST_ORDER : $score;
        $weixin_msg = [
            'number2' => ['value' => $score],//变动数量
            'thing3' => ['value' => '积分增加'],//变动原因
            'thing1' => ['value' => date("Y-m-d H:i:s",TIMESTAMP)],//积分名称
        ];
        WeixinSubscribeMsg::sendMsg($weixin_msg,$this->member_info['member_wxopenid'],WeixinSubscribeMsg::SCORE_CHANGE);

        return [true, ''];
    }

    /**
     * 单商品订单评价
     * @return mixed
     */
    public function actionEva()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        if (!$order_id) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        $param = Yii::$app->request->post();
        //1好评 2中评 3差评
        $eval_level = in_array($param['eval_level'], [1, 2, 3]) ? $param['eval_level'] : 1;
        //评价内容
        $eval_content = (string)$param['eval_content'];
        if ($eval_content == '') {
            return $this->responseJson(Message::ERROR, '说说你的买花心得吧');
        }
        if (mb_strlen($eval_content) > 200) {
            return $this->responseJson(Message::ERROR, '评价内容最多200字');
        }
        //评价图片 array
        $eval_pic = $param['eval_pic'];
        if (!empty($eval_pic) && is_array($eval_pic)) {
            foreach ($eval_pic as $pic) {
                if (!isImgName_wx($pic)) {
                    return $this->responseJson(Message::ERROR, '评价图片有误');
                }
            }
        } else {
            $eval_pic = '';
        }
        //isanonymous
        $is_anonymous = $param['is_anonymous'] == 1 ? 1 : 0;

        //鲜花质量
        $store_star_zl = in_array($param['store_star_zl'], [1, 2, 3, 4, 5]) ? $param['store_star_zl'] : 5;
        //送货速度
        $store_star_sd = in_array($param['store_star_sd'], [1, 2, 3, 4, 5]) ? $param['store_star_zl'] : 5;
        //花店服务
        $store_star_fw = in_array($param['store_star_fw'], [1, 2, 3, 4, 5]) ? $param['store_star_zl'] : 5;

        $transaction = Yii::$app->db->beginTransaction();
        try {
            $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
            if (empty($order)) {
                throw new \Exception('订单不存在或已删除');
            }
            if ($order->order_state != ORDER_STATE_SUCCESS) {
                throw new \Exception('订单状态已发生变化');
            }

            //添加商品评价
            $eva_goods = new EvaluateGoods();
            $eva_goods->geval_orderid = $order->order_id;
            $eva_goods->geval_orderno = $order->order_sn;
            $eva_goods->geval_level = $eval_level;
            $eva_goods->geval_scores = 5;
            $eva_goods->geval_hits = 0;
            $eva_goods->geval_scores_fw = $store_star_fw;
            $eva_goods->geval_scores_zl = $store_star_zl;
            $eva_goods->geval_scores_sd = $store_star_sd;
            $eva_goods->geval_content = $eval_content;
            $eva_goods->geval_isanonymous = $is_anonymous;
            $eva_goods->geval_addtime = TIMESTAMP;
            $eva_goods->geval_storeid = $order->delivery_store_id;
            $eva_goods->geval_storename = $order->delivery_store_name;
            $eva_goods->geval_frommemberid = $order->buyer_id;
            $eva_goods->geval_frommembername = $order->buyer_name;
            $eva_goods->geval_explain = '';
            $eva_goods->geval_image = $eval_pic ? implode(',', $eval_pic) : '';
            $eva_goods->geval_content_again = '';
            $eva_goods->geval_addtime_again = 0;
            $eva_goods->geval_image_again = '';
            $eva_goods->geval_explain_again = '';
            $eva_goods->geval_hits = 0;
            if ($order->order_type == Orders::ORDER_TYPE_MATERIAL) {
                //花材评价
                $eva_goods->geval_type = 2;
            } elseif ($order->order_type == Orders::ORDER_TYPE_STORE) {
                //店铺花评价
                $eva_goods->geval_type = 3;
            } else {
                //其他商品评价
                $eva_goods->geval_type = 1;
            }
            $order_goods = OrderGoods::find()->where(['order_id' => $order->order_id])->all();
            foreach ($order_goods as $goods) {
                $eva_goods->geval_ordergoodsid = $goods->rec_id;
                $eva_goods->geval_goodsid = $goods->goods_id;
                $eva_goods->geval_goodsname = $goods->goods_name;
                $eva_goods->geval_goodsprice = $goods->goods_price;
                $eva_goods->geval_goodsimage = $goods->goods_image;
                $result = $eva_goods->insert(false);
                if (!$result) {
                    throw new \Exception('评价失败，请重试(0x2101)');
                }
            }

            //添加店铺评价
            $eva_store = new EvaluateStore();
            $eva_store->seval_type = $eva_goods->geval_type;
            $eva_store->seval_orderid = $order->order_id;
            $eva_store->seval_orderno = $order->order_sn;
            $eva_store->seval_addtime = TIMESTAMP;
            $eva_store->seval_storeid = $order->delivery_store_id;
            $eva_store->seval_storename = $order->delivery_store_name;
            $eva_store->seval_memberid = $order->buyer_id;
            $eva_store->seval_membername = $order->buyer_name;
            $eva_store->seval_desccredit = $store_star_zl;
            $eva_store->seval_servicecredit = $store_star_fw;
            $eva_store->seval_deliverycredit = $store_star_sd;
            $result = $eva_store->insert(false);
            if (!$result) {
                throw new \Exception('评价失败，请重试(0x2102)');
            }
            //评价状态 0未评价，1已评价，2已过期未评价
            //evaluation_again_state 追加评价状态 0未评价，1已评价，2已过期未评价
            $order->evaluation_state = 1;
            $order->order_state = ORDER_STATE_EVA;
            $result = $order->save();
            if (!$result) {
                throw new \Exception('评价失败，请重试(0x2103)');
            }
            $result = OrderLog::addBuyerLog($order, '您已提交了评价');
            if (!$result) {
                throw new \Exception('评价失败，请重试(0x2104)');
            }
            //评价加浪漫值
            $member = Member::find()->where(['member_id' => $this->member_id])->select("member_exppoints")->one();
            $grade = Member::instance()->getMemberGradeData($member->member_exppoints);
            $operate_eva_arr = MemberExppointsLog::$operate_eva_arr;
            if(isset($operate_eva_arr[$grade['level']-1])){
                $result = MemberExppointsLog::addExppoints($this->member_id,$operate_eva_arr[$grade['level']-1],MemberExppointsLog::OPERATE_EVA,$order_id);
                if($result['code'] == 0){
                    throw new \Exception($result['msg']);
                }
            }

            $transaction->commit();
            $trace = Orders::instance()->getOrderStateTrace($order);
            $this->evaNotifyStore($order->huawa_orderid,$eval_level);
            return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $trace);
        } catch (\Exception $e) {
            Yii::error($e->getMessage());
            $transaction->rollBack();
            return $this->responseJson(Message::ERROR, $e->getMessage());
        }
    }

    /**
     * 多商品订单评价
     * @return mixed
     */
    public function actionEvas()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        if (!$order_id) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        $param = Yii::$app->request->post();
        if (empty($param['comments_json'])) {
            return $this->responseJson(Message::ERROR, '评价参数错误');
        }

        //鲜花质量
        $store_star_zl = isset($param['store_star_zl']) && in_array($param['store_star_zl'], [1, 2, 3, 4, 5]) ? $param['store_star_zl'] : 5;
        //送货速度
        $store_star_sd = isset($param['store_star_sd']) && in_array($param['store_star_sd'], [1, 2, 3, 4, 5]) ? $param['store_star_sd'] : 5;
        //花店服务
        $store_star_fw = isset($param['store_star_fw']) && in_array($param['store_star_fw'], [1, 2, 3, 4, 5]) ? $param['store_star_fw'] : 5;
        // 是否是有图片的评价
        $has_pic = false;
        //内容安全检测
        $aly = new AlyContentSecurity();
        //1好评 2中评 3差评
        foreach ($param["comments_json"] as $val) {
            $item["eval_level"] = isset($val["eval_level"]) && in_array($val['eval_level'], [1, 2, 3]) ? $val['eval_level'] : 1;
            $val['eval_content'] = filterEmoji($val['eval_content']);
            if (isset($val['eval_content']) && $val['eval_content'] != '') {
                $item['eval_content'] = (string)$val['eval_content'];
            } else {
                return $this->responseJson(Message::ERROR, '说说你的买花心得吧');
            }
            if (mb_strlen($val['eval_content']) > 200) {
                return $this->responseJson(Message::ERROR, '评价内容最多200字');
            }
            $text_res = $aly->detectionText($val['eval_content']);
            $text_res = json_decode($text_res, true);
            if ($text_res['code'] != 200) {
                return $this->responseJson(Message::ERROR, $text_res['msg']);
            }
            $res = SensitiveWord::detectSensitiveWord($val['eval_content']);
            if($res){
                return $this->responseJson(Message::ERROR, '检测到敏感词汇: ' . $res);
            }
            if (!empty($val['eval_pic']) ) {
                $images = $val['eval_pic'];
                if(is_string($val['eval_pic'])){
                    $images = explode(',', $val['eval_pic']);
                }
                foreach ($images as $pic) {
                    if (!isImgName_wx($pic)) {
                        return $this->responseJson(Message::ERROR, '评价图片有误');
                    }
                }
                $item['eval_pic'] = implode(',', $images);
                $has_pic = true;
            } else {
                $item['eval_pic'] = '';
            }
            $item['eval_tags'] = isset($val['eval_tags']) ? $val['eval_tags'] : '';
            //isanonymous
            $item['is_anonymous'] = isset($val['is_anonymous']) && $val['is_anonymous'] == 1 ? 1 : 0;
            $item['goods_id'] = $val['goods_id'];
            $comments[] = $item;
        }
        $transaction = Yii::$app->db->beginTransaction();
        try {
            $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
            if (empty($order)) {
                throw new \Exception('订单不存在或已删除');
            }
            if ($order->order_state != ORDER_STATE_SUCCESS) {
                throw new \Exception('订单状态已发生变化');
            }
            $order_goods = OrderGoods::find()
                ->where(['order_id' => $order->order_id])
                ->select(['goods_price', 'rec_id', 'goods_id','goods_name', 'goods_image'])
                ->indexBy('goods_id')->asArray()->all();

            foreach ($comments as $comment) {
                //添加商品评价
                $eva_goods = new EvaluateGoods();
                $eva_goods->geval_orderid = $order->order_id;
                $eva_goods->geval_orderno = $order->order_sn;
                $eva_goods->geval_level = $comment['eval_level'];
                $eva_goods->geval_scores = 5;
                $eva_goods->geval_hits = 0;
                $eva_goods->geval_tags = $comment['eval_tags'];
                $eva_goods->geval_scores_fw = $store_star_fw;
                $eva_goods->geval_scores_zl = $store_star_zl;
                $eva_goods->geval_scores_sd = $store_star_sd;
                $eva_goods->geval_content = $comment['eval_content'];
                $eva_goods->geval_isanonymous = $comment['is_anonymous'];
                $eva_goods->geval_addtime = TIMESTAMP;
                $eva_goods->geval_storeid = $order->delivery_store_id;
                $eva_goods->geval_storename = $order->delivery_store_name;
                $eva_goods->geval_frommemberid = $this->member_id;
                $eva_goods->geval_frommembername = $this->member_name;
                $eva_goods->geval_explain = '';
                $eva_goods->geval_image = $comment['eval_pic'];
                $eva_goods->geval_content_again = '';
                $eva_goods->geval_addtime_again = 0;
                $eva_goods->geval_image_again = '';
                $eva_goods->geval_explain_again = '';
                $eva_goods->geval_hits = 0;
                if ($order->order_type == Orders::ORDER_TYPE_MATERIAL) {
                    //花材评价
                    $eva_goods->geval_type = 2;
                } elseif ($order->order_type == Orders::ORDER_TYPE_STORE) {
                    //店铺花评价
                    $eva_goods->geval_type = 3;
                } else {
                    //其他商品评价
                    $eva_goods->geval_type = 1;
                }
                if(isset($order_goods[$comment['goods_id']])){
                    $eva_goods->geval_ordergoodsid = $order_goods[$comment['goods_id']]['rec_id'];
                    $eva_goods->geval_goodsid = $order_goods[$comment['goods_id']]['goods_id'];
                    $eva_goods->geval_goodsname = $order_goods[$comment['goods_id']]['goods_name'];
                    $eva_goods->geval_goodsprice = sprintf("%.2f",$order_goods[$comment['goods_id']]['goods_price']);
                    $eva_goods->geval_goodsimage = $order_goods[$comment['goods_id']]['goods_image'];
                    $result = $eva_goods->insert(false);
                    if (!$result) {
                        throw new \Exception('评价失败，请重试(0x2101)');
                    }
                }
            }

            //添加店铺评价
            $eva_store = new EvaluateStore();
            $eva_store->seval_type = $eva_goods->geval_type;
            $eva_store->seval_orderid = $order->order_id;
            $eva_store->seval_orderno = $order->order_sn;
            $eva_store->seval_addtime = TIMESTAMP;
            $eva_store->seval_storeid = $order->delivery_store_id;
            $eva_store->seval_storename = $order->delivery_store_name;
            $eva_store->seval_memberid = $this->member_id;
            $eva_store->seval_membername = $this->member_name;
            $eva_store->seval_desccredit = $store_star_zl;
            $eva_store->seval_servicecredit = $store_star_fw;
            $eva_store->seval_deliverycredit = $store_star_sd;
            $result = $eva_store->insert(false);
            if (!$result) {
                throw new \Exception('评价失败，请重试(0x2102)');
            }
            //评价状态 0未评价，1已评价，2已过期未评价
            //evaluation_again_state 追加评价状态 0未评价，1已评价，2已过期未评价
            $order->evaluation_state = 1;
            $order->order_state = ORDER_STATE_EVA;
            if(!IS_TEST){
                $result = $order->save();
            }else{
//                $result = $order->save();
            }
            if (!$result) {
                throw new \Exception('评价失败，请重试(0x2103)');
            }
            $result = OrderLog::addBuyerLog($order, '您已提交了评价');
            if (!$result) {
                throw new \Exception('评价失败，请重试(0x2104)');
            }
            //屏蔽新增评论以外的数据库操作, 测试性能影响
            if ($has_pic) {
                // 评价完成增加积分
                list($bool, $msg) = HuadiScoreLog::addLog($this->member_id, HuadiScoreLog::SCORE_EVA, HuadiScoreLog::TYPE_ADD, HuadiScoreLog::OPERATE_EVA, $order->order_sn);
                if (!$bool) {
                    throw new \Exception('评价失败，'. $msg .'，请重试(0x2104)');
                }

                //评价加浪漫值
                $member = Member::find()->where(['member_id' => $this->member_id])->select("member_exppoints")->one();
                $grade = Member::instance()->getMemberGradeData($member->member_exppoints);
                $operate_eva_arr = MemberExppointsLog::$operate_eva_arr;
                if(isset($operate_eva_arr[$grade['level']-1])){
                    $result = MemberExppointsLog::addExppoints($this->member_id,$operate_eva_arr[$grade['level']-1],MemberExppointsLog::OPERATE_EVA,$order_id);
                    if($result['code'] == 0){
                        throw new \Exception($result['msg']);
                    }
                }
            }
            // 修改花娃店铺好评度、交易量花店排序分数
            if (SITEID == 258) {
                StoreHuadiScoreQueue::insertHuadiScoreQueue($order->delivery_store_id, 10);
            }

            if(!empty($comments[0]['eval_level'])){
                $this->evaNotifyStore($order->huawa_orderid,$comments[0]['eval_level']);
            }
            $trace = Orders::instance()->getOrderStateTrace($order);
            $transaction->commit();
            return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $trace);
        } catch (\Exception $e) {
            Yii::error($e->getMessage());
            $transaction->rollBack();
            return $this->responseJson(Message::ERROR, $e->getMessage());
        }
    }

    /**
     * 发送评价通知给花店
     * @param $huawa_order_id int 花娃订单id
     * @param $level int 评价等级
     * @return mixed
     */
    private function evaNotifyStore($huawa_order_id, $level)
    {
        switch ($level){
            case 1:
                $tips = '恭喜您';
                $eva_level = '好评';
                break;
            case 2:
                $tips = '很遗憾！';
                $eva_level = '中评';
                break;
            default:
                $tips = '很遗憾！';
                $eva_level = '差评';
        }
        $tem_data = [
            'tips' => $tips,
            'eva_level' => $eva_level
        ];
        $data = ['order_id' => $huawa_order_id, 'notify_name' => 'send_eva_notify', 'data' => json_encode($tem_data)];
        $huawa_result = HuawaApi::getInstance()->OC('huadi', 'send_app_notify', $data);
        \common\components\Log::writelog('send_app_notify', $huawa_result);
        return $huawa_result;
    }
    /**
     * 查看评价
     * @return mixed
     */
    public function actionEvaView()
    {

    }


    /**
     * 订单追踪
     * @return mixed
     */
    public function actionTrace()
    {
        $order_id = (int)Yii::$app->request->post('order_id');
        $order = Orders::find()->where(['order_id' => $order_id, 'buyer_id' => $this->member_id, 'delete_state' => 0])->one();
        if (empty($order)) {
            return $this->responseJson(Message::ERROR, '订单不存在或已删除');
        }
        $order_state = Orders::instance()->getOrderStateTrace($order);
        $data = [];
        $data['order'] = [
            'order_id' => $order->order_id,
            'order_sn' => $order->order_sn,
            'state_text' => $order_state['text']
        ];
        $data['trace'] = Orders::instance()->getOrderTrace($order);
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }

    /**
     * @return int
     */
    public function _IncreaseTimes()
    {
        //72小时的秒数
        $stable_times = 60 * 60 * 72;
        $now = time();
        $calculate = $now + $stable_times;
        return $calculate;
    }

    /**
     * 花递退款查看
     * @param $order
     * @param $refund
     */
    private function huadiServiceView($order,$refund){
        //默认新申请
        $current_index = 0;
        if($refund->buyer_message == '客户取消订单'){
            $head = [
                'content' => '您取消了订单，已自动发起退款申请',
                'timeline' => $refund->add_time,
            ];

        }else{
            $head = [
                'content' => '订单已关闭，您已发起退款',
                'timeline' => $refund->add_time,
            ];

        }
        if(in_array($refund->refund_state,[1,5])){   //退款申请处理中
            $current_index = 1;
            if(in_array($order->huawa_state ,[HUAWA_PLACE_ORDER_CANCEL,HUAWA_ACCEPT_ORDER_EXPIRE,HUAWA_ORDER_EXPIRE])){//无关花店，只需平台审核
                $foot = [
                    'content' => '退款中,等待平台审核中',
                    'timeline' => $refund->add_time+100,
                ];
            }elseif ($refund->seller_state > 0 || ($order->huawa_state >= HUAWA_ORDER_MAKING || $order->huawa_state == HUAWA_ORDER_STATUS_COMPLAINT_ING)){  //与花店有关
                if($refund->seller_state == 1){
                    $remain_time = $refund->deadline_time - TIMESTAMP;
                    $foot = [
                        'content' => $remain_time <= 0 ? '系统正在为您退款，1-3个工作日内即可到账，请耐心等待' : '退款中,等待商家处理，还剩{mint}自动同意',
                        'daojishi' => $remain_time > 0 ? 1 : 0,
                        'mint' => $remain_time > 0 ? $remain_time : 0,
                        'timeline' => TIMESTAMP,
                    ];
                }elseif($refund->seller_state == 2){
                    $foot = [
                        'content' => '退款中,商家同意退款，平台审核中',
                        'timeline'   => $refund->seller_time,
                    ];
                }elseif($refund->seller_state == 3){
                    $foot = [
                        'content' => '退款中,商家拒绝了您的退款申请，已进入平台申诉流程',
                        'timeline'   => $refund->seller_time,
                    ];
                }
            }
        }elseif(in_array($refund->refund_state,[2,3,8])){   //管理员审核通过 打款中
            $current_index = 2;
            $foot = [
                'content' => '退款成功,您的退款将在1-3个工作日退回到您的支付账户中',
                'timeline' => $refund->admin_time>0 ? $refund->admin_time : $refund->seller_time,
            ];
        }elseif($refund->refund_state == 6){
            if($order->huawa_state == HUAWA_ORDER_STATUS_COMPLAINT_ING){
                $current_index = 1;
                $foot = [
                    'content' => '退款中,商家拒绝了您的退款申请，已进入平台申诉流程',
                    'timeline' => $refund->seller_time,
                ];
            }else{
                $current_index = 2;
                $foot = [
                    'content' => '退款关闭,您的退款申请被拒绝',
                    'timeline' => $refund->admin_time,
                ];
            }
        }else{
            $current_index = 2;
            $foot = [
                'content' => '退款关闭,您的退款申请已撤销',
                'timeline' => $refund->admin_time,
            ];
        }
        $mediate = Orders::instance()->getOrderRefundTrace($order);
        array_unshift($mediate,$foot);
        array_push($mediate,$head);
        $cot = count($mediate) - 1;
        if($mediate[0]['timeline'] < $mediate[1]['timeline']){
            $mediate[0]['timeline'] = $mediate[1]['timeline'] + rand(59,121);
        }
        if($mediate[$cot]['timeline'] > $mediate[$cot-1]['timeline']){
            $mediate[$cot]['timeline'] = $mediate[$cot-1]['timeline'] - rand(59,121);
        }
        foreach ($mediate as $k => $val) {
            $mediate[$k]['timeline'] = date('Y-m-d H:i:s', $val['timeline']);
        }
        $data['refund'] = [
            'reason' => isset($this->refund_reason_list[$refund->reason_id]) ? $this->refund_reason_list[$refund->reason_id] : '其他',
            'desc' => $refund->buyer_message,
            'pic' => $refund->pic_info ? array_map(function ($val) {
                return getImgUrl($val, ATTACH_SERVICE);
            }, unserialize($refund->pic_info)) : [],
        ];
        $data['current_index'] = $current_index;
        $data['trace'] = $mediate;
        $progress_tips['refund_sn'] = isset($refund->refund_sn) ? $refund->refund_sn : '';
        $progress_tips['order_sn'] = isset($order->order_sn) ? $order->order_sn : '';
        $data['progress_tips'] = $progress_tips;
        $data['button'] = [];
        //2019年12月订单流程优化修改 添加撤销退款申请的按钮
        if($refund->refund_state == RefundReturn::REFUND_STATE_NEW || $refund->refund_state == RefundReturn::REFUND_STATE_CHECK){
            $data['button'] =[
//                ['alias' => 'cancel_refund', 'name' => '撤销申请', 'group' => 'B', 'extra' => ['confirm_tip' => ['title' => '确定撤销申请', 'subtitle' => '撤销后，若您的问题未解决，在售后期内您还可再次发起退款']]]
            ];
        }
        //处理 联系商家  接口联系信息
        $orders = new Orders();
        $data['connect_shop'] = $orders->getConnectShopInfo($order->order_id);
        $data['delivery_type'] = $order->delivery_type;
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }

    /**
     * 2019年12月订单流程优化修改 订单未推送到花娃时取消了订单 售后进度查看
     * @param $order object 订单信息
     * @param $no_push_order object 当前订单退款申请时间
     * @return string
     */
    private function noPushRefund($order, $no_push_order){
        $trace = [
            [
                'content' => '取消订单成功，正在受理',
                'timeline' => date("Y-m-d H:i:s",$no_push_order->handle_time),
            ]
        ];
        $refund = [
            'desc' => '客户取消订单',
            'pic' => [],
            'reason' => '客户取消订单'
        ];

        $data = [
            'trace' => $trace,
            'refund' => $refund,
            'progress_tips' => [
                'order_sn' => $order->order_sn,
                'refund_sn' => ''
            ],
            'delivery_type' => 0,
            'current_index' => 2,
            'connect_shop' => [
                'delivery_member_id' => 0,
                'delivery_store_logo' => '',
                'delivery_store_name' => ''
            ],
            'button' => [
//                ['alias' => 'cancel_refund', 'name' => '撤销申请', 'group' => 'B', 'extra' => ['confirm_tip' => ['title' => '确定撤销申请', 'subtitle' => '撤销后，若您的问题未解决，在售后期内您还可再次发起退款']]]
            ]
        ];
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }
    /**
     * @param $stable_times
     * @return string
     */
    public function _PrettyTimes($stable_times)
    {
        //传递时间-当前时间，剩余秒数转换为天数，小时，秒数
        $time = time();
        if ($stable_times > $time) {
            $timeCurrent = $time;
            $timeDiff = abs($timeCurrent - $time);//取时间差的绝对值
            $second = floor($timeDiff);//相差秒数
            $minite = floor($timeDiff / 60);//相差分钟数
            $hour = floor($timeDiff / 3600);//相差小时数
            $day = floor($timeDiff / 3600 / 24);//相差天数
            return $day . '天' . $hour . '时' . $minite . '分' . $second . '秒';
        }

    }
    /**
     * 评价管理
     */
    public function actionEvalManage()
    {
        $param = Yii::$app->request->post();
        $page = (int)$param['page'] ? (int)$param['page'] : 1;
        $eval_goods_model=new EvaluateGoods();
        $data=$eval_goods_model->getEvalList($page,$this->member_id);
        if($page==1){
            $data['wait_comment']=Orders::getOrderEvaCount($this->member_id);
        }
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }

    /**
     * 评价删除
     */
    public function actionEvalDel(){
        $geval_id = Yii::$app->request->post("geval_id");
        $eval_model=EvaluateGoods::findOne(['geval_id'=>intval($geval_id)]);
        if(!$eval_model){
            return $this->responseJson(Message::VALID_FAIL, '无效的参数');
        }
        $result=$eval_model->delete();
        if($result){
            //删除评价扣除浪漫值
            $old_info = MemberExppointsLog::find()->where(['member_id'=>$this->member_id,'operate'=>MemberExppointsLog::OPERATE_EVA,'other'=>$eval_model->geval_orderid])->select("exppoints")->asArray()->one();
            if(!empty($old_info['exppoints'])){
                MemberExppointsLog::addExppoints($this->member_id,$old_info['exppoints'],MemberExppointsLog::OPERATE_EVA,0,'删除评价',0);
            }
            return $this->responseJson(Message::SUCCESS, '删除成功');
        }
        return $this->responseJson(Message::ERROR, '删除失败');
    }
}
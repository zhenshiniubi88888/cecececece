<?php

namespace frontend\controllers;

use common\components\FinalPrice;
use common\components\Log;
use common\components\Message;
use common\models\Goods;
use common\models\Member;
use common\models\PBundlingGoods;
use common\models\Redpacket;
use common\models\Voucher;
use common\models\VoucherTemplate;
use frontend\service\VoucherService;
use Yii;
use yii\web\HttpException;

/**
 * VoucherController
 */
class VoucherController extends BaseController
{
//    public function init()
//    {
//        parent::init();
//
//    }
    public function beforeAction($action)
    {
        if(!in_array($action->id,['get-member-invite-list','get-invite-voucher-rank','get-voucher-key'])){
//            $this->validLogin();
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub

    }
        
    public function actionIndex()
    {
        $voucher = VoucherService::fetchVoucherTmp($this->member_id);
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $voucher);
    }

    /**
     * 所有优惠券
     * @return mixed
     */
    public function actionAll()
    {
        if ($this->member_id<=0){
            return $this->responseJson(Message::UN_LOGIN, Message::UN_LOGIN_MSG);
        }
        $data = [];
        $voucher = new Voucher();
        $data['available'] = $voucher->getFriendlyList($this->member_id, Voucher::STATE_OK);
        $data['unavailable'] = $voucher->getFriendlyList($this->member_id, Voucher::STATE_USED);
        $data['expire'] = $voucher->getFriendlyList($this->member_id, Voucher::STATE_EXPIRE);
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }

    /**
     * 所有红包
     * @return mixed
     */
    public function actionGetRedPacketAll()
    {
        $data = [];
        $rpacket = new Redpacket();
        $data['available'] = $rpacket->getFriendlyList($this->member_id, Redpacket::STATE_OK);
        $data['unactive'] = $rpacket->getFriendlyList($this->member_id, Redpacket::STATE_UNACTIVE);
        $data['unavailable'] = $rpacket->getFriendlyList($this->member_id, Redpacket::STATE_USED);
        $data['expire'] = $rpacket->getFriendlyList($this->member_id, Redpacket::STATE_EXPIRE);
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }
    /**
     * 花递免费领取优惠券
     */
    public function actionHuadiFreeVoucher(){
        //已邀请人数
//        $member_count = Member::find()->where(['inviter_id'=>$this->member_id])->count();
        $member_count = Voucher::find()->alias('a')
            ->innerJoin(Member::tableName() . ' b','b.member_id = a.voucher_owner_id')
            ->where(['voucher_t_id' => HUADI_INVITE_VOUCHER_ID, 'b.inviter_id' => $this->member_id])
            ->count();
        $voucher_ids = explode(',',HUADI_VOUCHER_IDS);
        array_unshift($voucher_ids,1660);//2020年初年货节专题临时使用的优惠券模板id
        $goods_model = new Goods();
        $goods_voucher_list = [];
        foreach ($voucher_ids as $k=>$voucher_id){
            $goods_voucher = [];
            $template = VoucherTemplate::instance()->getOneActiveTemplate($voucher_id);
            if($template){
                //优惠券
                $voucher_template = [];
                $voucher_template['voucher_match'] = $template['voucher_t_limit'] > 0 ? sprintf('满%s减%s', (int)$template['voucher_t_limit'],(int)$template['voucher_t_price']) : '无门槛使用';
                $voucher_template['voucher_t_limit'] = $template['voucher_t_limit'];
                $voucher_template['voucher_t_price'] = $template['voucher_t_price'];
                $voucher_template['voucher_key'] = base64_encode(\Yii::$app->getSecurity()->encryptByPassword($template['voucher_t_id'] . '|' . $template['voucher_t_end_date'], SECURITY_KEY));
                try {
                    //如果抛出异常标识代金券模板不存在或者已过期
                    $voucher_template['is_get'] = Voucher::instance()->checkPicked($voucher_id, $this->member_id);       //验证是否已领取
                } catch (\Exception $exception) {
                    $voucher_template['is_get'] = 0;
                }
                //根据后台设置，返回优惠券跳转地址
                $voucher_template['voucher_url'] = Voucher::setVoucherUrl(['voucher_url'=>$template['voucher_url'],'voucher_url_type'=>$template['voucher_url_type']]);

                $map = [];
                $gc_id = 0;
                $map['goods_state'] = 1;
                $map['goods_verify'] = 1;
                if(strstr($template->voucher_t_title, '生活')){
                    $map['is_hot'] = 1;
                    $gc_id = Goods::FLOWER_HOME;
                    $order = "sort_order desc,is_best desc";
                    $limite_text = '限生活鲜花使用';
                    $limite_type = 2;
                    //临时指定展示商品ID
                    $goods_ids = [15070,14868,14887];
                }elseif(strstr($template->voucher_t_title, '包月')){
                    $map['is_new'] = 1;
                    $gc_id = Goods::FLOWER_HOME;
                    $order = "sort_order desc,is_best desc,is_hot desc";
                    $limite_text = '限包月鲜花使用';
                    $limite_type = 1;
                    //临时指定展示商品ID
                    $goods_ids = [14897,14888,13722];
                    $bl_ids = [23, 24, 2];
                }elseif (strstr($template->voucher_t_title, '礼品')){
                    $map['is_hot'] = 1;
                    $gc_id = GOODS_FLOWER_GIFT;
                    $order = "sort_order desc,is_best desc";
                    $limite_text = '限礼品鲜花使用';
                    $limite_type = 3;
                    //临时指定展示商品ID
                    $goods_ids = [16685,14616,16018];
                }elseif (strstr($template->voucher_t_title,'花递年货节')){
//                    $map['is_hot'] = 1;
                    $gc_id = GOODS_FLOWER_GIFT;
                    $order = "sort_order desc,is_best desc";
                    $limite_text = '限年货节商品使用';
                    $limite_type = 3;
                    //临时指定展示商品ID
                    $goods_ids = [15759,15758];
                }
                $voucher_template['voucher_limit_text'] = $limite_text;
                $voucher_template['voucher_limit_type'] = $limite_type;
                $goods_voucher['voucher'] = $voucher_template;

                $cache_key_goods_list = 'voucher_goods_list_' . $voucher_id;
                $goods_list = cache($cache_key_goods_list);
                if (!$goods_list || empty($goods_list)) {
                    // 包月花
                    if ($limite_type == 1) {
                        $goods_list = [];
                        foreach ($bl_ids as $bl_id) {
                            $model_bundling = new \common\models\PBundling();
                            $bunding_field = 'bl_id, bl_name, bl_discount_price, bl_freight_choose, bl_freight, mobile_body, norms_info';
                            $bunding = $model_bundling->getBundlingDetail($bl_id, $bunding_field);
                            $tmp = [];
                            $tmp['goods_price'] = $bunding['bl_discount_price'];
                            $tmp['goods_img'] = $bunding['goods'][0]['image'];
                            $tmp['bl_id'] = $bl_id;
                            $tmp['goods_name'] = $bunding['bl_name'];
                            $goods_list[] = $tmp;
                        }
                    } else {
                        if($gc_id>0){
                            $goods_list = $goods_model->getGoodsList(['in','goods_id',$goods_ids], null, 'goods_id,gc_id_2,goods_name,ahj_goods_price as goods_price,goods_costprice,goods_image', $order, 3);
                        }
                        if(!empty($goods_list)){
                            foreach ($goods_list as $kk => $goods) {
                                $goods_list[$kk]['goods_price'] = sprintf("%.2f",FinalPrice::S($goods['goods_price']));
                                unset($goods_list[$kk]['goods_costprice']);
                                unset($goods_list[$kk]['goods_image']);
                                $goods_list[$kk]['goods_img'] = thumbGoods($goods['goods_image'], 260);
                            }
                        }
                    }
                }
                if (!empty($goods_list)) {
                    $goods_voucher['goods_list'] = $goods_list;
                    cache($cache_key_goods_list, $goods_list, 3600 * 24);
                }
            }
            if(!empty($goods_voucher)){
                $goods_voucher_list[] = $goods_voucher;
            }
        }
        $data['goods_voucher_list'] = $goods_voucher_list;
        $data['invite_count'] = $member_count;
        $data['invite_member_id'] = $this->member_id;
        $data['invite_voucher_id'] = HUADI_INVITE_VOUCHER_ID;
        $data['invite_key'] = base64_encode(\Yii::$app->getSecurity()->encryptByPassword(HUADI_INVITE_VOUCHER_ID . '|' . $this->member_id, SECURITY_KEY));
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }
    public function actionGetMemberInviteList(){
        $voucher_key = Yii::$app->request->post('voucher_key');
        $page = Yii::$app->request->post('page',1);
//        $voucher_key = base64_encode(\Yii::$app->getSecurity()->encryptByPassword(HUADI_INVITE_VOUCHER_ID . '|' . $this->member_id, SECURITY_KEY));;
        $voucher_data = \Yii::$app->getSecurity()->decryptByPassword(base64_decode($voucher_key), SECURITY_KEY);
        list($voucher_t_id, $p_invite_member_id) = explode('|', $voucher_data);
        $pagesize = 10;
        $offset = ($page-1)*$pagesize;
        //邀请人id邀请列表
        $invited_list = Voucher::find()->alias('a')
            ->innerJoin(Member::tableName() . ' b','b.member_id = a.voucher_owner_id')
            ->where(['b.inviter_id' => $p_invite_member_id,'voucher_t_id' => $voucher_t_id])
            ->select(['a.voucher_price','a.voucher_title','b.member_name','b.member_nickname','b.member_mobile','member_avatar'])
            ->asArray()->offset($offset)->limit($pagesize)->all();
        $invited_ret = [];
        foreach($invited_list as $invited){
            $invited_ret[] = [
                'member_nickname' => getMemberName($invited),
                'member_avatar' => getMemberAvatar($invited['member_avatar']),
                'voucher_title' => $invited['voucher_title'],
                'voucher_price' => $invited['voucher_price'],
            ];
        }
        $data = [
            'invited_list' => $invited_ret
        ];
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }
    public function actionGetInviteVoucherRank(){
        $voucher_key = Yii::$app->request->post('voucher_key');
//        $voucher_key = base64_encode(\Yii::$app->getSecurity()->encryptByPassword(HUADI_INVITE_VOUCHER_ID . '|' . $this->member_id, SECURITY_KEY));;
        $voucher_data = \Yii::$app->getSecurity()->decryptByPassword(base64_decode($voucher_key), SECURITY_KEY);
        list($voucher_t_id, $p_invite_member_id) = explode('|', $voucher_data);
        //邀请排行
        $common_rank_cache = cache('common_rank_'.$voucher_key);
        if(!$common_rank_cache){
            $common_rank = Voucher::find()->alias('a')
                ->innerJoin(Member::tableName() . ' b','b.member_id = a.voucher_owner_id')
                ->select(['b.inviter_id','count(*) member_count','sum(voucher_price) amount'])
                ->where(['voucher_t_id' => $voucher_t_id])
                ->andWhere(['>', 'b.inviter_id', 0])
                ->groupBy('inviter_id')
                ->orderBy('member_count desc')->limit(50)->asArray()->all();
            $inviter_member_info = Member::find()->where(['member_id' => array_column($common_rank,'inviter_id')])
                ->select(['member_nickname','member_name','member_mobile','member_avatar','member_id'])
                ->asArray()->indexBy('member_id')->all();
            $common_rank_cache = [];
            foreach($common_rank as $rank){
                if(isset($inviter_member_info[$rank['inviter_id']])){
                    $common_rank_cache[] = [
                        'member_nickname' => getMemberName($inviter_member_info[$rank['inviter_id']]),
                        'member_avatar' => getMemberAvatar($inviter_member_info[$rank['inviter_id']]['member_avatar']),
                        'member_count' => $rank['member_count'],
                        'amount' => $rank['amount']
                    ];
                }
            }
            //如果真实数据不足20条,补齐假数据
            if(!$common_rank_cache || count($common_rank_cache) < 10){
                $voucher = new Voucher();
                $common_rank_cache = $voucher->getFakeRankList($common_rank_cache,10);
            }
            //打乱数组
            $member_count = array_column($common_rank_cache,'member_count');
            array_multisort($member_count,SORT_DESC,$common_rank_cache);
            cache('common_rank_'.$voucher_key,$common_rank_cache,600);
        }
        //轮播列表
        $common_rank_cycle_cache = cache('common_rank_cycle_'.$voucher_key);
        if(!$common_rank_cycle_cache){
            $common_rank_cycle = Voucher::find()->alias('a')
                ->innerJoin(Member::tableName() . ' b','b.member_id = a.voucher_owner_id')
                ->select(['b.inviter_id','a.voucher_price'])
                ->where(['voucher_t_id' => $voucher_t_id])
                ->orderBy('a.voucher_active_date desc')->limit(20)->asArray()->all();
            $inviter_member_info = Member::find()->where(['member_id' => array_column($common_rank_cycle,'inviter_id')])
                ->select(['member_nickname','member_name','member_mobile','member_avatar','member_id'])
                ->asArray()->indexBy('member_id')->all();
            $common_rank_cycle_cache = [];
            foreach($common_rank_cycle as $cycle) {
                if (isset($inviter_member_info[$cycle['inviter_id']])) {
                    $common_rank_cycle_cache[] = [
                        'member_nickname' => getMemberName($inviter_member_info[$cycle['inviter_id']]),
                        'member_avatar' => getMemberAvatar($inviter_member_info[$cycle['inviter_id']]['member_avatar']),
                        'amount' => $cycle['voucher_price']
                    ];
                }
            }
            //如果真实数据不足20条,补齐假数据
            if(!$common_rank_cycle_cache || count($common_rank_cycle_cache) < 20){
                $voucher = new Voucher();
                $common_rank_cycle_cache = $voucher->getFakeCycleList($common_rank_cycle_cache,20);
            }
            //打乱数组
            shuffle($common_rank_cycle_cache);
            cache('common_rank_cycle_'.$voucher_key, $common_rank_cycle_cache, 600);
        }
        $data = [
            'common_rank' => $common_rank_cache,
            'common_rank_cycle' => $common_rank_cycle_cache
        ];
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }

    /**
     * 通过邀请人和券id换取voucher_key,解决小程序码参数长度限制无法直接传voucher_key
     */
    public function actionGetVoucherKey(){
        $invite_id = Yii::$app->request->post('invite_id','');
        $invite_voucher_id = Yii::$app->request->post('invite_voucher_id','');
        if(!$invite_id || !$invite_voucher_id){
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        $member_model = new Member();
        $data['invite_member_info'] = $member_model->getMemberInfoById($invite_id,'member_avatar,member_nickname');
        $data['voucher_key'] = base64_encode(\Yii::$app->getSecurity()->encryptByPassword($invite_voucher_id . '|' . $invite_id, SECURITY_KEY));
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }
    /**
     * 花递优惠券详情
     */
    public function actionVoucherView(){
        $voucher_id = \Yii::$app->request->post('voucher_id');
        if (empty($voucher_id) && $voucher_id <= 0) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        $voucher_info = Voucher::instance()->getVoucherInfo(['voucher_id'=>$voucher_id]);
        //暂直接组
        $limite_text = '礼品鲜花';
        if(strstr($voucher_info['voucher_title'], '生活')){
            $limite_text = '生活鲜花';
        }elseif(strstr($voucher_info['voucher_title'], '包月')){
            $limite_text = '包月鲜花';
        }elseif (strstr($voucher_info['voucher_title'], '礼品')){
            $limite_text = '礼品鲜花';
        }
        $youxiao_day = intval(($voucher_info['voucher_end_date'] - $voucher_info['voucher_start_date'])/86400);
        $youxiao_day = $youxiao_day > 0 ? $youxiao_day : 1;
        $voucher_info_data = [
            [
                'name'=>'券名',
                'desc'=>'商品满减券',
                'opr'=>''
            ],
            [
                'name' => '券码',
                'desc' => $voucher_info['voucher_code'],
                'opr' => 'copy'
            ],
            [
                'name'=>'得券途径',
                'desc'=>$voucher_info['voucher_remark'],
                'opr'=>''
            ],
            [
                'name'=>'领券日期',
                'desc'=>date('Y-m-d H:i:s',$voucher_info['voucher_active_date']),
                'opr'=>''
            ],
            [
                'name'=>'',
                'desc'=>sprintf('仅可购买%s元以上商品时使用，满%s减%s', (int)$voucher_info['voucher_limit'],(int)$voucher_info['voucher_limit'],(int)$voucher_info['voucher_price']),
                'opr'=>''
            ],
            [
                'name'=>'',
                'desc'=>"仅限原价购买{$limite_text}时使用，不可购买活动商品（特价、限时抢购、拼团等特定活动商品）",
                'opr'=>''
            ],
            [
                'name'=>'',
                'desc'=>'购买第三方花店（附近花店）商品时不可用',
                'opr'=>''
            ],
            [
                'name'=>'',
                'desc'=>'不能与其他优惠券叠加使用',
                'opr'=>''
            ],
            [
                'name'=>'',
                'desc'=>'使用优惠券支付的订单，开始配送后如果退货，优惠券抵扣金额不能退还，只能退还实际支付商品金额',
                'opr'=>''
            ],
            [
                'name'=>'',
                'desc'=>'优惠券不退补，不找零',
                'opr'=>''
            ],
            [
                'name'=>'',
                'desc'=>"优惠券有效期：自领券日起{$youxiao_day}天内有效",
                'opr'=>''
            ],
        ];
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $voucher_info_data);
    }


    /**
     * 花递邀请成功获取优惠券
     */
    public function actionGetRegisterVoucher(){
        $voucher_key = \Yii::$app->request->post('voucher_key');
        if (empty($voucher_key)) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        //解密voucher_id|p_invite_member_id
        $voucher_data = \Yii::$app->getSecurity()->decryptByPassword(base64_decode($voucher_key), SECURITY_KEY);
        if (empty($voucher_data)) {
            return $this->responseJson(Message::ERROR, Message::ERROR_MSG);
        }
        list($voucher_t_id, $p_invite_member_id) = explode('|', $voucher_data);
        if ((int)$voucher_t_id < 1 || (int)$p_invite_member_id < 1) {
            return $this->responseJson(Message::ERROR, Message::ERROR_MSG);
        }
        $member = Member::findOne(['member_id' => $this->member_id]);
        if(!$member){
            return $this->responseJson(Message::ERROR, '该账号不存在');
        }
        if($member->inviter_id > 1){
            return $this->responseJson(Message::ERROR, '账号已被邀请');
        }
        $transaction = Yii::$app->db->beginTransaction();
        try {
            $member->inviter_id = $p_invite_member_id;
            $result = $member->save();
            if(!$result){
                throw new \Exception('更新失败');
            }
            //父级领取
            $p_member = Member::findOne($p_invite_member_id);
            //添加一条优惠券记录
            $p_voucher = Voucher::instance()->exchangeVoucher($voucher_t_id, $p_member,"邀请{$member->member_nickname}成功注册");
            if(!$p_voucher){
                throw new \Exception('邀请人领取优惠券失败');
            }
            //本人领取
            $voucher = Voucher::instance()->exchangeVoucher($voucher_t_id, $member,"被{$p_member->member_nickname}成功邀请注册");
            if(!$voucher){
                throw new \Exception('被邀请人领取优惠券失败');
            }
            $transaction->commit();
        } catch (\Exception $e) {
            $transaction->rollBack();
            return $this->responseJson(0, $e->getMessage());
        }
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, []);
    }
    /**
     * 加载更多优惠券
     * @param $status
     * @param $page
     * @return mixed
     */
    public function actionList()
    {
        $param = \Yii::$app->request->post();
        $data = [];
        $voucher = new Voucher();
        $data['list'] = $voucher->getFriendlyList($this->member_id, (int)$param['status'], (int)$param['page'], false);
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG, $data);
    }

    /**
     * 根据优惠券模板ID领取优惠券
     * encrypt=voucher_t_id|timestamp
     * @return mixed
     */
    public function actionGet()
    {
        $voucher_key = \Yii::$app->request->post('key');
        if (empty($voucher_key)) {
            return $this->responseJson(Message::EMPTY_CODE, Message::EMPTY_MSG);
        }
        //解密voucher_id|timestamp
        $voucher_data = \Yii::$app->getSecurity()->decryptByPassword(base64_decode($voucher_key), SECURITY_KEY);
        if (empty($voucher_data)) {
            return $this->responseJson(Message::ERROR, Message::ERROR_MSG);
        }
        list($voucher_t_id, $timestamp) = explode('|', $voucher_data);
        if ((int)$voucher_t_id < 1 || (int)$timestamp < 1) {
            return $this->responseJson(Message::ERROR, Message::ERROR_MSG);
        }
        //有效期验证
        if (TIMESTAMP - $timestamp > 86400) {
            return $this->responseJson(Message::ERROR, '请刷新后重新领取'.$timestamp);
        }
        //验证是否已领取
        try{
            if (Voucher::instance()->checkPicked($voucher_t_id, $this->member_id)) {
                return $this->responseJson(Message::ERROR, '您已经领取过了，快去使用吧');
            }
        }catch(\Exception $e){
            return $this->responseJson(Message::ERROR, $e->getMessage());
        }

        //优惠券领取
        $result = Voucher::instance()->exchangeMember($voucher_t_id, $this->member_id);
        if (false == $result) {
            return $this->responseJson(Message::ERROR, '领取失败，请稍后再试');
        }
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG);
    }

    /**
     * 优惠券包领取
     * @return mixed
     */
    public function actionBundle()
    {
        if($this->member_id == 1003){
            return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG);
        }
        $topic_id = \Yii::$app->request->post('topic_id');
        $voucher_bundle = array(
            '142' => array(451, 452, 454, 458, 460, 461),
            '143' => array(1650, 1651, 1652, 1650, 1651, 1652)//新人100元优惠券包
        );
        if (!in_array($topic_id, array_keys($voucher_bundle))) {
            return $this->responseJson(Message::ERROR, Message::ERROR_MSG);
        }
        $voucher_t_id = $voucher_bundle[$topic_id];
        //验证是否已领取
        if (Voucher::instance()->checkPicked(current($voucher_t_id), $this->member_id)) {
            return $this->responseJson(Message::ERROR, '您已经领取过了，快去使用吧');
        }
        //优惠券领取
        $result = Voucher::instance()->exchangeMember($voucher_t_id, $this->member_id);
        if (false == $result) {
            return $this->responseJson(Message::ERROR, '领取失败，请稍后再试');
        }
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG);
    }

    /**
     * 优惠券包领取  slx
     * @return mixed
     */
    public function actionChrimsBundle()
    {
//        $topic_id = \Yii::$app->request->post('topic_id');
//        if (!in_array($topic_id, array(999))) {
//            return $this->responseJson(Message::ERROR, Message::ERROR_MSG);
//        }
//        $voucher_bundle = array(
//            '999' => array(1650, 1651, 1652, 1650, 1651, 1652)
//        );
        if(!$this->member_id){
            return $this->responseJson(Message::UN_LOGIN, Message::UN_LOGIN_MSG);
        }
        $voucher_t_id = array(1650, 1651, 1652, 1650, 1651, 1652);
        //验证是否已领取03255
        if (Voucher::instance()->checkPicked(current($voucher_t_id), $this->member_id)) {
            return $this->responseJson(2, '您已经领取过了，快去使用吧');
        }
        //优惠券领取
        $result = Voucher::instance()->exchangeMember($voucher_t_id, $this->member_id,'圣诞节福利');
        if (false == $result) {
            return $this->responseJson(Message::ERROR, '领取失败，请稍后再试');
        }
        return $this->responseJson(Message::SUCCESS, Message::SUCCESS_MSG);
    }

}
